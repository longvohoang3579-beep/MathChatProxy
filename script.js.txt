// File: script.js
// Nhiệm vụ: Xử lý tương tác trên trình duyệt, gọi API server và ghép các frame thành GIF.

const promptInput = document.getElementById('prompt-input');
const generateBtn = document.getElementById('generate-btn');
const statusEl = document.getElementById('status');
const gifOutput = document.getElementById('gif-output');

// Giả sử các element này tồn tại trong file index.html của bạn
if (generateBtn) {
    generateBtn.addEventListener('click', async () => {
        const prompt = promptInput.value;
        if (!prompt) {
            alert('Vui lòng nhập mô tả cho video!');
            return;
        }

        try {
            // Vô hiệu hóa nút và cập nhật trạng thái
            generateBtn.disabled = true;
            gifOutput.src = "";
            statusEl.textContent = 'Đang gửi yêu cầu, AI bắt đầu tạo khung hình (có thể mất vài phút)...';

            // 1. Gọi API server để lấy các khung hình
            const response = await fetch('http://localhost:3000/api/pollinations-frames', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: prompt }),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message);
            }

            const data = await response.json();
            statusEl.textContent = `Đã nhận ${data.frames.length} khung hình. Bắt đầu ghép GIF...`;

            // 2. Ghép các frames thành GIF bằng hàm bên dưới
            await createGifFromFrames(data.frames);

        } catch (error) {
            statusEl.textContent = `Lỗi: ${error.message}`;
        } finally {
            generateBtn.disabled = false;
        }
    });
}

async function createGifFromFrames(frames) {
    return new Promise((resolve, reject) => {
        const gif = new GIF({
            workers: 2,
            quality: 10,
            workerScript: 'https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.worker.js'
        });

        const loadImage = (src) => new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = (err) => reject(err);
            img.src = src;
        });

        // Đảm bảo tất cả ảnh được tải xong trước khi thêm vào GIF
        Promise.all(frames.map(loadImage))
            .then(images => {
                images.forEach(img => {
                    gif.addFrame(img, { delay: 120 }); // delay 120ms mỗi khung hình
                });

                gif.on('finished', (blob) => {
                    gifOutput.src = URL.createObjectURL(blob);
                    statusEl.textContent = '✅ Hoàn thành!';
                    resolve();
                });

                gif.render();
            })
            .catch(error => {
                console.error("Lỗi khi tải ảnh frame:", error);
                statusEl.textContent = 'Lỗi: Không thể tải một hoặc nhiều ảnh frame.';
                reject(error);
            });
    });
}