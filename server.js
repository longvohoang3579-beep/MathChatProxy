// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 2.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
// X√≥a: import fs from "fs";
// X√≥a: import path from "path";
// X√≥a: import { exec } from "child_process";

dotenv.config();
const app = express();
// TƒÉng gi·ªõi h·∫°n payload l√™n 50MB ƒë·ªÉ ch·ª©a ·∫£nh Base64
app.use(bodyParser.json({ limit: "50mb" }));
// Ph·ª•c v·ª• file tƒ©nh (index.html c√πng th∆∞ m·ª•c)
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-2.5-flash";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
}

// ======== H√†m g·ªçi Gemini API (retry/backoff) ========
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";

  try {
    for (let i = 0; i < 3; i++) {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text;
        }
        if (data.error) {
          console.error("‚ùå L·ªói API t·ª´ Gemini:", data.error);
          return `‚ùå L·ªói API t·ª´ Gemini: ${data.error.message}`;
        }
        return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
      }

      const errorText = await response.text();
      console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);

      if (response.status === 429 || response.status >= 500) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.`;
    }
    return "‚ùå ƒê√£ th·ª≠ l·∫°i nh∆∞ng v·∫´n l·ªói khi g·ªçi Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)";
  }
}

// ======== H√†m build content parts (text + inline image) ========
function buildContentParts(text, image, systemInstruction) {
  let userParts = [];
  const textPart = systemInstruction + "\n\nTin nh·∫Øn: " + (text || "Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ chi ti·∫øt b·ª©c ·∫£nh n√†y.");
  userParts.push({ text: textPart });

  if (image) {
    const parts = image.split(',');
    const mimeTypeMatch = parts[0].match(/data:(.*?);/);
    if (mimeTypeMatch && parts.length === 2) {
      userParts.push({
        inlineData: {
          mimeType: mimeTypeMatch[1],
          data: parts[1]
        }
      });
    } else {
      throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
    }
  }
  return userParts;
}

// ======== D·ªãch sang ti·∫øng Anh (fallback: tr·∫£ text g·ªëc) ========
async function translateToEnglish(text) {
  if (!text) return "";
  if (GEMINI_API_KEY) {
    try {
      const promptTranslate = `D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Anh, ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ d·ªãch. KH√îNG TH√äM B·∫§T K·ª≤ L·ªúI N√ìI ƒê·∫¶U HAY L·ªúI K·∫æT N√ÄO.\nVƒÉn b·∫£n: "${text}"`;
      const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
      const response = await callGeminiModel(contents);
      if (response && !response.startsWith("‚ùå")) {
        return response.replace(/^"|"$/g, '').trim();
      } else {
        return text;
      }
    } catch (err) {
      console.error("L·ªói d·ªãch v·ªõi Gemini:", err);
      return text;
    }
  }

  try {
    const url = "https://api.mymemory.translated.net/get?q=" + encodeURIComponent(text) + "&langpair=vi|en";
    const r = await fetch(url);
    const d = await r.json();
    return d.responseData?.translatedText || text;
  } catch (e) {
    return text;
  }
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// ======== H√†m t·∫£i 1 khung h√¨nh v·ªõi Retry (T·ªëi ƒëa 3 l·∫ßn) ========
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const r = await fetch(url);
      if (r.ok) {
        const buffer = Buffer.from(await r.arrayBuffer());
        return `data:image/jpeg;base64,${buffer.toString("base64")}`;
      }
      if (attempt < maxRetries) {
        console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói (HTTP ${r.status}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
        await new Promise(resolve => setTimeout(resolve, 1000 + (500 * attempt)));
      } else {
        console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠ (HTTP ${r.status}). B·ªè qua khung h√¨nh n√†y.`);
      }
    } catch (e) {
      if (attempt < maxRetries) {
        console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói m·∫°ng. Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}. Chi ti·∫øt: ${e.message}`);
        await new Promise(resolve => setTimeout(resolve, 1000 + (500 * attempt)));
      } else {
        console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠: ${e.message}. B·ªè qua khung h√¨nh n√†y.`);
      }
    }
  }
  return null;
}

// ============================================================
// üñºÔ∏è/üéûÔ∏è API T·∫†O KHUNG H√åNH (Pollinations -> 12 frames Base64)
// ============================================================
app.post("/api/pollinations-frames", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });

  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const framesCount = 12;
    console.log(`B·∫Øt ƒë·∫ßu t·∫£i ${framesCount} khung h√¨nh cho prompt: ${translatedPrompt}`);

    const downloadPromises = [];
    for (let i = 0; i < framesCount; i++) {
      const variation = `${translatedPrompt}, motion frame ${i + 1} of ${framesCount}, cinematic, high detail`;
      const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=512&height=512`;
      downloadPromises.push(fetchFrameWithRetry(url, i + 1));
    }

    const frames = await Promise.all(downloadPromises);
    const validFrames = frames.filter(f => f && typeof f === 'string' && f.startsWith('data:image'));

    if (validFrames.length < 8) {
      console.error(`‚ùå Ch·ªâ t·∫£i ƒë∆∞·ª£c ${validFrames.length}/${framesCount} khung h√¨nh.`);
      return res.status(500).json({ message: "‚ùå Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh ƒë·ªÉ t·∫°o chuy·ªÉn ƒë·ªông m∆∞·ª£t m√†. Vui l√≤ng th·ª≠ l·∫°i." });
    }

    console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng ${validFrames.length} khung h√¨nh.`);
    res.json({ frames: validFrames });

  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω chung t·∫°o khung h√¨nh Base64:", error);
    res.status(500).json({ message: "‚ùå L·ªói x·ª≠ l√Ω chung tr√™n Server. (Vui l√≤ng ki·ªÉm tra console server ƒë·ªÉ bi·∫øt chi ti·∫øt)" });
  }
});

// ============================================================
// üí¨ CHAT (highlight + short responses)
// ============================================================
app.post("/api/chat", async (req, res) => {
  const { message, history, language, image } = req.body;
  if (!message && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat ho·∫∑c ·∫£nh." });

  const languageMap = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English (Ti·∫øng Anh)', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá (Ti·∫øng Trung Gi·∫£n th·ªÉ)' };
  const langName = languageMap[language] || languageMap['vi'];

  const systemInstruction = `
B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng **${langName}**.
- Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN, TR·ªåNG T√ÇM**, ch·ªâ t·∫≠p trung v√†o c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
- N·∫øu c√≥ √Ω ch√≠nh/k·∫øt qu·∫£, h√£y b·ªçc trong <mark class="highlight">...</mark>.
- KH√îNG th√™m gi·ªõi thi·ªáu/ƒëo·∫°n lan man.
- N·∫øu ng∆∞·ªùi d√πng g·ª≠i ·∫£nh, ph√¢n t√≠ch ·∫£nh v√† tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ·∫£nh.
`;

  let contents = [];
  if (Array.isArray(history)) {
    history.forEach(item => {
      const role = item.role === "assistant" ? "model" : item.role;
      contents.push({ role: role, parts: [{ text: item.text }] });
    });
  }

  try {
    const userParts = buildContentParts(message, image, systemInstruction);
    contents.push({ role: "user", parts: userParts });
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω chat:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu chat tr√™n server." });
  }
});

// ============================================================
// üßÆ GI·∫¢I TO√ÅN (Ng·∫Øn g·ªçn, LaTeX, Highlight, h·ªó tr·ª£ ·∫£nh)
// ============================================================
app.post("/api/math", async (req, res) => {
  const { question, image } = req.body;
  if (!question && !image) return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n ho·∫∑c ·∫£nh b√†i to√°n." });

  const systemInstruction = `
H√£y gi·∫£i b√†i to√°n sau **ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ**, b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu.
- Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**.
- Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$).
- T√¥ m√†u v√†ng c√°c k·∫øt qu·∫£ v√† √Ω quan tr·ªçng b·∫±ng <mark class="highlight">...</mark>.
- N·∫øu c√≥ ·∫£nh, h√£y ph√¢n t√≠ch ·∫£nh ƒë·ªÉ gi·∫£i b√†i to√°n trong ·∫£nh.
`;

  try {
    const userParts = buildContentParts(question, image, systemInstruction);
    const contents = [{ role: "user", parts: userParts }];
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω to√°n:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu to√°n tr√™n server." });
  }
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
  if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
});
server.timeout = 300000;
