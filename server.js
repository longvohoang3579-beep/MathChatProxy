// ============================================================
// ü§ñ MATH CHAT PROXY SERVER (Gemini + Pollinations)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";

dotenv.config();
const app = express();
app.use(bodyParser.json());
app.use(express.static("public"));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent";

// ======== üîπ H√†m g·ªçi Gemini API ========
async function callGeminiModel(prompt) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GOOGLE_API_KEY trong .env.";

  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ role: "user", parts: [{ text: prompt }] }]
      }),
    });

    const data = await response.json();

    if (!data.candidates || !data.candidates[0].content.parts[0].text) {
      console.error("‚ùå L·ªói t·ª´ Google Gemini:", data);
      return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini.";
    }

    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini.";
  }
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - gi·ªØ nguy√™n nh∆∞ y√™u c·∫ßu)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });
  }

  try {
    const safePrompt = encodeURIComponent(prompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// ============================================================
// üí¨ CHAT T·ªîNG H·ª¢P
// ============================================================
app.post("/api/chat", async (req, res) => {
  const { message } = req.body;
  if (!message) {
    return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat." });
  }

  const prompt = `
  B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán, ng·∫Øn g·ªçn. 
  N·∫øu c√≥ √Ω ch√≠nh, h√£y b·ªçc trong <mark class="highlight">...</mark> ƒë·ªÉ t√¥ m√†u v√†ng.
  ${message}
  `;

  const reply = await callGeminiModel(prompt);
  res.json({ response: reply });
});

// ============================================================
// üßÆ GI·∫¢I TO√ÅN (ng·∫Øn g·ªçn, c√≥ c√¥ng th·ª©c & highlight)
// ============================================================
app.post("/api/math", async (req, res) => {
  const { question } = req.body;
  if (!question) {
    return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n." });
  }

  const prompt = `
  H√£y gi·∫£i **ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu** b√†i to√°n sau b·∫±ng ti·∫øng Vi·ªát. 
  - Ch·ªâ hi·ªÉn th·ªã b∆∞·ªõc ch√≠nh v√† k·∫øt qu·∫£ cu·ªëi.
  - Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$).
  - D√πng Markdown + <mark class="highlight">...</mark> ƒë·ªÉ t√¥ m√†u v√†ng c√°c √Ω ch√≠nh ho·∫∑c k·∫øt qu·∫£.
  B√†i to√°n: ${question}
  `;

  const reply = await callGeminiModel(prompt);
  res.json({ response: reply });
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
