import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fetch from "node-fetch";

dotenv.config();
const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(bodyParser.json());

// üß† Pollinations Image API
app.post("/api/pollinations-image", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

  try {
    const safePrompt = encodeURIComponent(prompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// üí¨ Gemini Chat + Math
app.post("/api/gemini", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Thi·∫øu n·ªôi dung chat." });

  try {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      console.error("Thi·∫øu GEMINI_API_KEY trong file .env");
      return res.status(500).json({ text: "‚ùå L·ªói c·∫•u h√¨nh ph√≠a server." });
    }

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
      }
    );

    const data = await response.json();

    // GHI L·∫†I TO√ÄN B·ªò PH·∫¢N H·ªíI T·ª™ GOOGLE ƒê·ªÇ DEBUG
    console.log("Ph·∫£n h·ªìi t·ª´ Gemini API:", JSON.stringify(data, null, 2));

    // Ki·ªÉm tra xem c√≥ l·ªói t·ª´ API kh√¥ng
    if (data.error) {
      return res.status(500).json({ text: `‚ùå L·ªói t·ª´ Google: ${data.error.message}` });
    }

    // Ki·ªÉm tra xem n·ªôi dung c√≥ b·ªã ch·∫∑n v√¨ l√Ω do an to√†n kh√¥ng
    if (!data.candidates || data.candidates.length === 0) {
      const blockReason = data.promptFeedback?.blockReason;
      if (blockReason) {
        return res.json({ text: `‚ùå N·ªôi dung b·ªã ch·∫∑n v√¨: ${blockReason}` });
      }
      return res.json({ text: "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini." });
    }

    const text = data.candidates[0]?.content?.parts[0]?.text || "‚ùì Kh√¥ng t√¨m th·∫•y n·ªôi dung tr·∫£ l·ªùi.";
    res.json({ text });

  } catch (err) {
    console.error("L·ªói h·ªá th·ªëng khi g·ªçi Gemini:", err);
    res.status(500).json({ text: "‚ùå L·ªói h·ªá th·ªëng khi g·ªçi Gemini API." });
  }
});