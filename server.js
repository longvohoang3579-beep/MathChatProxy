import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();

app.use(cors());
app.use(bodyParser.json({ limit: "50mb" }));
app.use(express.static("."));

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
// Khuy·∫øn ngh·ªã d√πng model m·ªõi v√† hi·ªáu qu·∫£ cho chat: gemini-2.5-flash
const GEMINI_MODEL = "gemini-2.5-flash"; 
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p! Vui l√≤ng t·∫°o file .env v√† ƒëi·ªÅn kh√≥a API.");
}

/**
 * H√†m g·ªçi API Gemini
 * @param {Array} contents 
 * @returns {Promise<string>}
 */
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå L·ªói: Vui l√≤ng cung c·∫•p GEMINI_API_KEY trong file .env.";
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ contents }),
    });
    const data = await response.json();
    
    if (!response.ok) {
        console.error("‚ùå L·ªói t·ª´ Gemini API:", data);
        // Y√äU C·∫¶U 2: C·∫£i ti·∫øn th√¥ng b√°o l·ªói HTTP 404/kh√°c
        const errorMessage = data.error?.message || 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt. Vui l√≤ng ki·ªÉm tra API Key v√† Project Google Cloud ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t d·ªãch v·ª• Generative Language API ch∆∞a.';
        return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini: ${errorMessage}`;
    }
    
    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
      return data.candidates[0].content.parts[0].text;
    }
    return "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini.";
  } catch (error) {
    console.error("üî• L·ªói k·∫øt n·ªëi ƒë·∫øn Gemini:", error);
    return "‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Google Gemini. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa server.";
  }
}

/**
 * X√¢y d·ª±ng c√°c ph·∫ßn n·ªôi dung cho API Gemini
 */
function buildContentParts(text, image, systemInstruction) {
  let parts = [{ text: `${systemInstruction}\n\nUser query: ${text || "Please analyze this image."}` }];
  if (image) {
    const [, mimeType, , data] = image.match(/data:(.*?);(.*?),(.*)/) || [];
    if (mimeType && data) {
      parts.push({ inlineData: { mimeType, data } });
    }
  }
  return parts;
}

/**
 * Y√äU C·∫¶U 1: D·ªãch prompt t·∫°o ·∫£nh sang Ti·∫øng Anh
 * @param {string} text 
 * @returns {Promise<string>}
 */
async function translateToEnglish(text) {
    if (!text || /^[a-zA-Z0-9\s.,?!'-]*$/.test(text)) {
        return text;
    }
    try {
        // S·ª≠ d·ª•ng Google Translate API c√¥ng c·ªông
        const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&q=${encodeURIComponent(text)}`;
        const response = await fetch(url);
        const data = await response.json();
        const translatedText = data[0].map(item => item[0]).join('');
        return translatedText || text;
    } catch (error) {
        console.error(" L·ªói d·ªãch thu·∫≠t, s·ª≠ d·ª•ng vƒÉn b·∫£n g·ªëc:", error.message);
        return text; 
    }
}

// =========================================================================
// API ENDPOINTS
// =========================================================================

app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });
  try {
    // TH·ª∞C HI·ªÜN D·ªäCH TR∆Ø·ªöC KHI G·ªåI T·∫†O ·∫¢NH
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    // Pollinations.ai d√πng ti·∫øng Anh cho k·∫øt qu·∫£ t·ªët nh·∫•t
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

app.post("/api/pollinations-frames", async (req, res) => {
    let { prompt } = req.body;
    if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });
    try {
        const translatedPrompt = await translateToEnglish(prompt);
        const safePrompt = encodeURIComponent(translatedPrompt);
        // API n√†y s·∫Ω tr·∫£ v·ªÅ 10 frame h√¨nh ·∫£nh base64 ƒë·ªÉ t·∫°o GIF
        const framesUrl = `https://image.pollinations.ai/prompt/${safePrompt}?frames=10&nologo=true&output_base64=true&width=512&height=512`;
        const response = await fetch(framesUrl);
        const data = await response.json();
        if (data.frames) {
            res.json({ frames: data.frames });
        } else {
            res.status(500).json({ message: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c frames h·ª£p l·ªá t·ª´ Pollinations." });
        }
    } catch (error) {
        res.status(500).json({ message: "L·ªói trong qu√° tr√¨nh t·∫°o frames video." });
    }
});


/**
 * H√†m x·ª≠ l√Ω chung cho c√°c y√™u c·∫ßu Gemini (chat/math)
 */
async function handleGeminiRequest(req, res, systemInstruction) {
    const { message, question, image } = req.body;
    const text = message || question;
    if (!text && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung." });
    try {
        const userParts = buildContentParts(text, image, systemInstruction);
        const contents = [{ role: "user", parts: userParts }];
        const reply = await callGeminiModel(contents);
        res.json({ response: reply });
    } catch (error) {
        res.status(500).json({ response: "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu tr√™n server." });
    }
}

app.post("/api/chat", (req, res) => {
    const { language } = req.body;
    const langName = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá' }[language] || 'Ti·∫øng Vi·ªát';
    const systemInstruction = `B·∫°n l√† tr·ª£ l√Ω AI. Tr·∫£ l·ªùi b·∫±ng **${langName}**. Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN**, ƒë·ªãnh d·∫°ng markdown, v√† highlight √Ω ch√≠nh b·∫±ng <mark class="highlight">...</mark>.`;
    handleGeminiRequest(req, res, systemInstruction);
});

app.post("/api/math", (req, res) => {
    const systemInstruction = `Gi·∫£i b√†i to√°n b·∫±ng ti·∫øng Vi·ªát. Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**. D√πng LaTeX cho c√¥ng th·ª©c ($...$) v√† <mark class="highlight">...</mark> cho k·∫øt qu·∫£.`;
    handleGeminiRequest(req, res, systemInstruction);
});


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
});