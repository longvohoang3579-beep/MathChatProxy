// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 1.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();

// ============================================================
// ‚öôÔ∏è C·∫§U H√åNH MIDDLEWARE
// ============================================================
app.use(cors());
app.use(bodyParser.json({ limit: "50mb" }));
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
// ‚úÖ S·ª¨A L·ªñI: ƒê·ªïi model v·ªÅ gemini-1.5-flash v√† URL v·ªÅ v1, phi√™n b·∫£n ·ªïn ƒë·ªãnh nh·∫•t
const GEMINI_MODEL = "gemini-1.5-flash-latest"; 
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
}

// ======== H√†m g·ªçi Gemini API (retry/backoff) ========
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";

  try {
    for (let i = 0; i < 3; i++) {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text;
        }
        if (data.error) {
          console.error("‚ùå L·ªói API t·ª´ Gemini:", data.error);
          return `‚ùå L·ªói API t·ª´ Gemini: ${data.error.message}`;
        }
        console.log("Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini:", JSON.stringify(data, null, 2));
        return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
      }

      const errorText = await response.text();
      console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);

      if (response.status === 429 || response.status >= 500) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      // Tr·∫£ v·ªÅ l·ªói r√µ r√†ng h∆°n cho client
      return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini. Vui l√≤ng ki·ªÉm tra l·∫°i API Key v√† c·∫•u h√¨nh project Google AI.`;
    }
    return "‚ùå ƒê√£ th·ª≠ l·∫°i nh∆∞ng v·∫´n l·ªói khi g·ªçi Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)";
  }
}

// ======== H√†m build content parts (text + inline image) ========
function buildContentParts(text, image, systemInstruction) {
  let userParts = [];
  const textPart = systemInstruction + "\n\nTin nh·∫Øn: " + (text || "Please analyze and describe this image in detail.");
  userParts.push({ text: textPart });

  if (image) {
    const parts = image.split(',');
    const mimeTypeMatch = parts[0].match(/data:(.*?);/);
    if (mimeTypeMatch && parts.length === 2) {
      userParts.push({
        inlineData: {
          mimeType: mimeTypeMatch[1],
          data: parts[1]
        }
      });
    } else {
      throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
    }
  }
  return userParts;
}

// ======== D·ªãch sang ti·∫øng Anh (fallback: tr·∫£ text g·ªëc) ========
async function translateToEnglish(text) {
  if (!text) return "";
  if (GEMINI_API_KEY) {
    try {
      const promptTranslate = `Translate the following text to English. Return ONLY the translated text, without any introductory phrases or explanations. Text: "${text}"`;
      const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
      const response = await callGeminiModel(contents);
      return (response && !response.startsWith("‚ùå")) ? response.replace(/^"|"$/g, '').trim() : text;
    } catch (err) {
      console.error("L·ªói d·ªãch v·ªõi Gemini:", err);
      return text;
    }
  }
  try {
    const url = "https://api.mymemory.translated.net/get?q=" + encodeURIComponent(text) + "&langpair=vi|en";
    const r = await fetch(url);
    const d = await r.json();
    return d.responseData?.translatedText || text;
  } catch (e) {
    return text;
  }
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });
  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// ======== H√†m t·∫£i 1 khung h√¨nh v·ªõi Retry ========
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const r = await fetch(url);
            if (r.ok) {
                const buffer = Buffer.from(await r.arrayBuffer());
                return `data:image/jpeg;base64,${buffer.toString("base64")}`;
            }
            if (attempt < maxRetries) {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói (HTTP ${r.status}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
                await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            } else {
                console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠ (HTTP ${r.status}). B·ªè qua.`);
            }
        } catch (e) {
            if (attempt < maxRetries) {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói m·∫°ng. Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}. Chi ti·∫øt: ${e.message}`);
                await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            } else {
                console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠: ${e.message}. B·ªè qua.`);
            }
        }
    }
    return null;
}

// ============================================================
// üéûÔ∏è API T·∫†O KHUNG H√åNH (Pollinations)
// ============================================================
app.post("/api/pollinations-frames", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });
  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const framesCount = 12;
    console.log(`B·∫Øt ƒë·∫ßu t·∫£i ${framesCount} khung h√¨nh cho prompt: ${translatedPrompt}`);
    const downloadPromises = Array.from({ length: framesCount }, (_, i) => {
      const variation = `${translatedPrompt}, motion frame ${i + 1} of ${framesCount}, cinematic, high detail`;
      const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=512&height=512`;
      return fetchFrameWithRetry(url, i + 1);
    });
    const frames = await Promise.all(downloadPromises);
    const validFrames = frames.filter(f => f);
    if (validFrames.length < 8) {
      console.error(`‚ùå Ch·ªâ t·∫£i ƒë∆∞·ª£c ${validFrames.length}/${framesCount} khung h√¨nh.`);
      return res.status(500).json({ message: "‚ùå Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh. Vui l√≤ng th·ª≠ l·∫°i." });
    }
    console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng ${validFrames.length} khung h√¨nh.`);
    res.json({ frames: validFrames });
  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω chung t·∫°o khung h√¨nh Base64:", error);
    res.status(500).json({ message: "‚ùå L·ªói x·ª≠ l√Ω chung tr√™n Server." });
  }
});

// ============================================================
// üí¨ CHAT & üßÆ GI·∫¢I TO√ÅN API
// ============================================================
async function handleGeminiRequest(req, res, systemInstruction) {
    const { message, question, image } = req.body;
    const text = message || question;
    if (!text && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung ho·∫∑c ·∫£nh." });

    try {
        const userParts = buildContentParts(text, image, systemInstruction);
        const contents = [{ role: "user", parts: userParts }];
        const reply = await callGeminiModel(contents);
        res.json({ response: reply });
    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω request Gemini:", error);
        res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu tr√™n server." });
    }
}

app.post("/api/chat", (req, res) => {
    const { language } = req.body;
    const languageMap = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá' };
    const langName = languageMap[language] || languageMap['vi'];
    const systemInstruction = `
        B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng **${langName}**.
        - Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN, TR·ªåNG T√ÇM**.
        - N·∫øu c√≥ √Ω ch√≠nh/k·∫øt qu·∫£, h√£y b·ªçc trong <mark class="highlight">...</mark>.
        - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi b·∫±ng markdown n·∫øu c·∫ßn (v√≠ d·ª•: d√πng d·∫•u * cho danh s√°ch).
    `;
    handleGeminiRequest(req, res, systemInstruction);
});

app.post("/api/math", (req, res) => {
    const systemInstruction = `
        H√£y gi·∫£i b√†i to√°n sau **ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ**, b·∫±ng ti·∫øng Vi·ªát.
        - Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**.
        - Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$ ho·∫∑c $$...$$).
        - T√¥ m√†u v√†ng k·∫øt qu·∫£ quan tr·ªçng b·∫±ng <mark class="highlight">...</mark>.
    `;
    handleGeminiRequest(req, res, systemInstruction);
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
  if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
});
server.timeout = 300000;