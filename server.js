// ============================================================
// ü§ñ AI PROXY SERVER (Gemini + Pollinations) - PHI√äN B·∫¢N HO√ÄN CH·ªàNH
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from 'cors'; // Th∆∞ vi·ªán ƒë·ªÉ x·ª≠ l√Ω l·ªói k·∫øt n·ªëi CORS

dotenv.config();
const app = express();

// ================== C·∫§U H√åNH MIDDLEWARE ==================
// B·∫≠t CORS ƒë·ªÉ frontend (ch·∫°y tr√™n port kh√°c) c√≥ th·ªÉ g·ªçi API n√†y
app.use(cors());
// TƒÉng gi·ªõi h·∫°n payload l√™n 50MB ƒë·ªÉ ch·ª©a ·∫£nh Base64
app.use(bodyParser.json({ limit: "50mb" }));
// Ph·ª•c v·ª• c√°c file tƒ©nh nh∆∞ index.html t·ª´ th∆∞ m·ª•c hi·ªán t·∫°i
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-1.5-flash";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!");
}

// ======== H√†m g·ªçi Gemini API (c√≥ retry/backoff) ========
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ contents }),
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);
        return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini.`;
    }

    const data = await response.json();
    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
        return data.candidates[0].content.parts[0].text;
    }
    if (data.candidates?.[0]?.finishReason === 'SAFETY') {
        return "‚ùå Gemini ƒë√£ ch·∫∑n ph·∫£n h·ªìi do vi ph·∫°m ch√≠nh s√°ch an to√†n.";
    }
    return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini.";
  }
}

// ======== H√†m t·∫£i 1 khung h√¨nh v·ªõi Retry ========
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const r = await fetch(url, { timeout: 45000 });
            if (r.ok) {
                const buffer = Buffer.from(await r.arrayBuffer());
                return `data:image/jpeg;base64,${buffer.toString("base64")}`;
            }
        } catch (e) {
            console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói m·∫°ng (${e.name}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
            if (attempt < maxRetries) await new Promise(resolve => setTimeout(resolve, 1500 * attempt));
        }
    }
    console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠. B·ªè qua.`);
    return null;
}

// ============================================================
// üéûÔ∏è API T·∫†O VIDEO T·ª™ ·∫¢NH G·ªêC (ENDPOINT CH√çNH)
// ============================================================
app.post("/api/video-from-image", async (req, res) => {
    const { image, prompt } = req.body;
    if (!image) return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ·∫£nh g·ªëc." });

    try {
        console.log("ü§ñ 1/3: D√πng Gemini ƒë·ªÉ ph√¢n t√≠ch ·∫£nh...");
        const geminiSystemInstruction = `Analyze this image and describe it in a highly detailed, vivid, and artistic English prompt suitable for an AI image generator. Focus on the main subject, background, style, colors, and lighting. If the user provides an additional prompt, integrate it creatively. Return ONLY the final English prompt.`;
        
        const userParts = [];
        const textForGemini = prompt ? `User's additional instruction: "${prompt}"` : "Describe the image.";
        userParts.push({ text: textForGemini });

        const imgParts = image.split(',');
        userParts.push({ inlineData: { mimeType: imgParts[0].match(/data:(.*?);/)[1], data: imgParts[1] } });
        
        const contents = [
            { role: "user", parts: [{ text: "System instruction: " + geminiSystemInstruction }] },
            { role: "model", parts: [{ text: "Understood. I will provide a detailed English prompt." }] },
            { role: "user", parts: userParts }
        ];

        const basePromptFromImage = await callGeminiModel(contents);
        if (!basePromptFromImage || basePromptFromImage.startsWith("‚ùå")) {
            return res.status(500).json({ message: "Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh b·∫±ng AI. " + basePromptFromImage });
        }
        console.log("‚úÖ 2/3: Gemini ƒë√£ t·∫°o prompt th√†nh c√¥ng!");

        const framesCount = 10; // Gi·∫£m s·ªë l∆∞·ª£ng frame ƒë·ªÉ nh·∫π h∆°n
        console.log(`‚è≥ 3/3: B·∫Øt ƒë·∫ßu t·∫£i ${framesCount} khung h√¨nh t·ª´ Pollinations...`);

        const downloadPromises = [];
        for (let i = 0; i < framesCount; i++) {
            const variation = `${basePromptFromImage}, motion frame ${i + 1} of ${framesCount}, cinematic`;
            // Gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ tr√¨nh duy·ªát x·ª≠ l√Ω nh·∫π h∆°n v√† nhanh h∆°n
            const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=384&height=384`;
            downloadPromises.push(fetchFrameWithRetry(url, i + 1));
        }

        const frames = await Promise.all(downloadPromises);
        const validFrames = frames.filter(f => f);

        if (validFrames.length < 7) { // Y√™u c·∫ßu t·ªëi thi·ªÉu 7 frame
            return res.status(500).json({ message: `‚ùå Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh (${validFrames.length}/${framesCount}). Vui l√≤ng th·ª≠ l·∫°i.` });
        }

        console.log(`‚úÖ Ho√†n th√†nh! ƒê√£ t·∫£i th√†nh c√¥ng ${validFrames.length} khung h√¨nh.`);
        res.json({ frames: validFrames });

    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω chung khi t·∫°o video t·ª´ ·∫£nh:", error);
        res.status(500).json({ message: "‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh tr√™n server." });
    }
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
server.timeout = 600000; // TƒÉng timeout l√™n 10 ph√∫t