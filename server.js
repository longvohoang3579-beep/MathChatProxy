// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 2.5 Flash + Pollinations)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";

// T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
dotenv.config();
const app = express();
// TƒÉng gi·ªõi h·∫°n payload l√™n 50MB ƒë·ªÉ ch·ª©a ·∫£nh Base64
app.use(bodyParser.json({ limit: "50mb" }));

// üß© Ph·ª•c v·ª• file tƒ©nh (index.html c√πng th∆∞ m·ª•c)
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI 2.5 FLASH
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-2.5-flash"; // H·ªó tr·ª£ ƒëa ph∆∞∆°ng th·ª©c
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent`;

// C·∫£nh b√°o n·∫øu thi·∫øu API key
if (!GEMINI_API_KEY) {
  console.warn(
    "‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!"
  );
}

// ======== üîπ H√†m g·ªçi Gemini API (C√≥ Retry/Exponential Backoff) ========
/**
 * H√†m g·ªçi chung API Gemini.
 * @param {Array} contents M·∫£ng l·ªãch s·ª≠ chat (bao g·ªìm c·∫£ ·∫£nh).
 * @returns {Promise<string>} Ph·∫£n h·ªìi t·ª´ model ho·∫∑c th√¥ng b√°o l·ªói.
 */
async function callGeminiModel(contents) { 
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";

  try {
    // Th·ª≠ l·∫°i (exponential backoff) n·∫øu c√≥ l·ªói m·∫°ng ho·∫∑c l·ªói server
    for (let i = 0; i < 3; i++) {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text;
        } 
        if (data.error) {
          console.error("‚ùå L·ªói API t·ª´ Gemini:", data.error);
          return `‚ùå L·ªói API t·ª´ Gemini: ${data.error.message}`;
        }
        return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
      }

      const errorText = await response.text();
      console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);

      // N·∫øu l√† l·ªói 429 (Rate Limit) ho·∫∑c l·ªói server (5xx), th·ª≠ l·∫°i
      if (response.status === 429 || response.status >= 500) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      
      // L·ªói kh√°c (4xx), tho√°t
      return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.`;
    }
    return "‚ùå ƒê√£ th·ª≠ l·∫°i nh∆∞ng v·∫´n l·ªói khi g·ªçi Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)";
  }
}

// ======== üîπ H√†m x√¢y d·ª±ng n·ªôi dung ƒëa ph∆∞∆°ng ti·ªán (·∫¢nh v√† Text) ========
/**
 * X√¢y d·ª±ng m·∫£ng parts cho y√™u c·∫ßu Gemini, bao g·ªìm text (v·ªõi systemInstruction) v√† ·∫£nh Base64.
 */
function buildContentParts(text, image, systemInstruction) {
  let userParts = [];

  // 1. Th√™m System Instruction + Tin nh·∫Øn vƒÉn b·∫£n
  const textPart = systemInstruction + "\n\nTin nh·∫Øn: " + (text || "Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ chi ti·∫øt b·ª©c ·∫£nh n√†y.");
  userParts.push({ text: textPart });
  
  // 2. Th√™m ·∫£nh (n·∫øu c√≥)
  if (image) {
    const parts = image.split(',');
    const mimeTypeMatch = parts[0].match(/data:(.*?);/);
    
    if (mimeTypeMatch && parts.length === 2) {
      userParts.push({
        inlineData: {
          mimeType: mimeTypeMatch[1],
          data: parts[1] // Raw Base64 data
        }
      });
    } else {
      throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
    }
  }
  return userParts;
}

// ======== üîπ H√†m d·ªãch vƒÉn b·∫£n sang ti·∫øng Anh (s·ª≠ d·ª•ng Gemini) ========
/**
 * D·ªãch vƒÉn b·∫£n ƒë·∫ßu v√†o sang ti·∫øng Anh b·∫±ng Gemini API.
 * @param {string} text VƒÉn b·∫£n c·∫ßn d·ªãch.
 * @returns {Promise<string>} VƒÉn b·∫£n ƒë√£ d·ªãch ho·∫∑c vƒÉn b·∫£n g·ªëc n·∫øu l·ªói.
 */
async function translateToEnglish(text) {
  if (!GEMINI_API_KEY) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ d·ªãch prompt: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
    return text; // Tr·∫£ v·ªÅ text g·ªëc n·∫øu kh√¥ng c√≥ API key
  }

  // Y√™u c·∫ßu Gemini ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ d·ªãch, kh√¥ng th√™m l·ªùi n√≥i ƒë·∫ßu/k·∫øt
  const promptTranslate = `D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Anh, ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ d·ªãch. KH√îNG TH√äM B·∫§T K·ª≤ L·ªúI N√ìI ƒê·∫¶U HAY L·ªúI K·∫æT N√ÄO.
VƒÉn b·∫£n: "${text}"`;
  
  try {
    const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
    
    // S·ª≠ d·ª•ng h√†m g·ªçi model chung, kh√¥ng c·∫ßn x·ª≠ l√Ω l·∫°i retry/error
    const response = await callGeminiModel(contents);
    
    // X√≥a b·∫•t k·ª≥ k√Ω t·ª± th·ª´a n√†o (nh∆∞ d·∫•u nh√°y k√©p, kho·∫£ng tr·∫Øng)
    // N·∫øu response c√≥ th√¥ng b√°o l·ªói (v√≠ d·ª•: "‚ùå Thi·∫øu GEMINI_API_KEY..."), ta tr·∫£ v·ªÅ prompt g·ªëc
    if (response.startsWith("‚ùå")) {
      return text;
    }
    
    return response.replace(/^"|"$/g, '').trim(); 
  } catch (error) {
    console.error("‚ùå L·ªói khi d·ªãch prompt sang ti·∫øng Anh:", error);
    return text; // Tr·∫£ v·ªÅ text g·ªëc n·∫øu c√≥ l·ªói d·ªãch
  }
}


// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

  try {
    // B∆Ø·ªöC M·ªöI: D·ªãch prompt sang ti·∫øng Anh tr∆∞·ªõc
    const translatedPrompt = await translateToEnglish(prompt);
    console.log(`D·ªãch prompt t·ª´ "${prompt}" sang: "${translatedPrompt}"`);

    const safePrompt = encodeURIComponent(translatedPrompt);
    // Pollinations API: T·∫°o ·∫£nh d·ª±a tr√™n prompt ti·∫øng Anh ƒë√£ d·ªãch
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// ============================================================
// üí¨ CHAT T·ªîNG H·ª¢P (H·ªó tr·ª£ Chat Li√™n t·ª•c, Highlight V√Ä ·∫¢NH)
// ============================================================
app.post("/api/chat", async (req, res) => {
  const { message, history, language, image } = req.body; 
  if (!message && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat ho·∫∑c ·∫£nh." });

  // 1. ƒê·ªãnh nghƒ©a System Instruction
  const languageMap = {
    'vi': 'Ti·∫øng Vi·ªát',
    'en': 'English (Ti·∫øng Anh)',
    'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá (Ti·∫øng Trung Gi·∫£n th·ªÉ)'
  };
  
  const langName = languageMap[language] || languageMap['vi'];
  
  const systemInstruction = `
B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng **${langName}**.
- Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN, TR·ªåNG T√ÇM**, ch·ªâ t·∫≠p trung v√†o c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
- **KH√îNG** tr·∫£ l·ªùi lan man hay m·ªü r·ªông th√¥ng tin ngo√†i ph·∫°m vi y√™u c·∫ßu.
- T√≥m t·∫Øt √Ω ch√≠nh ho·∫∑c k·∫øt qu·∫£ quan tr·ªçng trong <mark class="highlight">...</mark>.
- N·∫øu ng∆∞·ªùi d√πng g·ª≠i ·∫£nh, h√£y ph√¢n t√≠ch ·∫£nh v√† tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ·∫£nh.
`;
  
  // 2. X·ª≠ l√Ω l·ªãch s·ª≠ chat: ƒê·∫£m b·∫£o chuy·ªÉn ƒë·ªïi ƒë√∫ng ƒë·ªãnh d·∫°ng (ch·ªâ text)
  let contents = [];
  if (Array.isArray(history)) {
    history.forEach(item => {
      const role = item.role === "assistant" ? "model" : item.role;
      contents.push({
        role: role,
        parts: [{ text: item.text }] 
      });
    });
  }

  // 3. X√¢y d·ª±ng parts cho tin nh·∫Øn ng∆∞·ªùi d√πng hi·ªán t·∫°i (c√≥ th·ªÉ ch·ª©a ·∫£nh)
  try {
    const userParts = buildContentParts(message, image, systemInstruction);

    // Th√™m tin nh·∫Øn/·∫£nh hi·ªán t·∫°i v√†o l·ªãch s·ª≠ chat
    contents.push({
      role: "user",
      parts: userParts
    });
    
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω chat:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu chat tr√™n server." });
  }
});

// ============================================================
// üßÆ GI·∫¢I TO√ÅN (Ng·∫Øn g·ªçn, LaTeX, Highlight, h·ªó tr·ª£ ·∫¢nh)
// ============================================================
app.post("/api/math", async (req, res) => {
  const { question, image } = req.body;
  if (!question && !image) return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n ho·∫∑c ·∫£nh b√†i to√°n." });

  // üí° Y√äU C·∫¶U NG·∫ÆN G·ªåN V√Ä CH·ªà T·∫¨P TRUNG V√ÄO TR·ªåNG T√ÇM
  const systemInstruction = `
  H√£y gi·∫£i b√†i to√°n sau **ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ**, b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu. 
  - Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**. KH√îNG M·ªû R·ªòNG.
  - Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$).
  - T√¥ m√†u v√†ng c√°c k·∫øt qu·∫£ v√† √Ω quan tr·ªçng b·∫±ng <mark class="highlight">...</mark>.
  - N·∫øu c√≥ ·∫£nh, h√£y ph√¢n t√≠ch ·∫£nh ƒë·ªÉ gi·∫£i b√†i to√°n trong ·∫£nh.
  `;
    
  // T·∫°o c·∫•u tr√∫c contents cho prompt ƒë∆°n
  try {
    const userParts = buildContentParts(question, image, systemInstruction);
    const contents = [{ role: "user", parts: userParts }];

    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω to√°n:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu to√°n tr√™n server." });
  }
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
  if (!GEMINI_API_KEY)
    console.warn(
      "‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!"
    );
});

// ** TƒÉng th·ªùi gian ch·ªù (timeout) cho server **
server.timeout = 300000;
