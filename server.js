import express from "express";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fetch from "node-fetch";

// C·∫•u h√¨nh m√¥i tr∆∞·ªùng (ƒë·ªçc .env)
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
// Model m·ªõi nh·∫•t, nhanh v√† ·ªïn ƒë·ªãnh, t∆∞∆°ng th√≠ch v·ªõi API v1
const GEMINI_MODEL = "gemini-2.5-flash"; 

// Middleware
app.use(bodyParser.json());
// Ph·ª•c v·ª• c√°c file tƒ©nh (HTML, CSS, JS) t·ª´ th∆∞ m·ª•c g·ªëc
app.use(express.static("."));

// =============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - Gi·ªØ nguy√™n)
// =============================================================
app.post("/api/pollinations-image", async (req, res) => {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

    try {
        const safePrompt = encodeURIComponent(prompt);
        // Endpoint Pollinations
        const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
        res.json({ imageUrl });
    } catch (error) {
        console.error("L·ªói Pollinations:", error);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
    }
});

// =============================================================
// üí¨ API CHAT & TO√ÅN - S·ª≠ d·ª•ng Gemini v2.5 Flash
// =============================================================

/**
 * H√†m g·ªçi chung ƒë·∫øn Gemini API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi vƒÉn b·∫£n.
 * Ch·∫•p nh·∫≠n m·∫£ng contents ƒë·ªÉ h·ªó tr·ª£ l·ªãch s·ª≠ chat.
 * @param {Array} contents M·∫£ng l·ªãch s·ª≠ chat ho·∫∑c prompt ƒë∆°n.
 * @returns {Promise<string>} Ph·∫£n h·ªìi t·ª´ model ho·∫∑c th√¥ng b√°o l·ªói.
 */
async function callGeminiModel(contents) { 
    const endpoint = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;
    
    try {
        const response = await fetch(endpoint, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            // body gi·ªù l√† m·∫£ng contents
            body: JSON.stringify({ contents: contents }) 
        });

        const data = await response.json();

        if (data.error) {
            console.error("‚ö†Ô∏è L·ªói Gemini API:", data.error);
            return `‚ùå L·ªói t·ª´ Gemini API: ${data.error.message}. (Model: ${GEMINI_MODEL})`;
        }

        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
            return data.candidates[0].content.parts[0].text;
        } else {
            console.log("Ph·∫£n h·ªìi t·ª´ Gemini (debug):", JSON.stringify(data, null, 2));
            return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini. N·ªôi dung c√≥ th·ªÉ b·ªã ch·∫∑n.";
        }
    } catch (err) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Gemini:", err);
        return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini.";
    }
}

// üí¨ Chat API (H·ªñ TR·ª¢ CHAT LI√äN T·ª§C & HIGHLIGHT)
app.post("/api/chat", async (req, res) => {
    const { message, history } = req.body; // Nh·∫≠n tin nh·∫Øn m·ªõi v√† l·ªãch s·ª≠ t·ª´ client
    if (!message) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat." });

    // 1. ƒê·ªãnh nghƒ©a System Instruction
    const systemInstruction = "H√£y tr·∫£ l·ªùi tin nh·∫Øn sau m·ªôt c√°ch **c·ª±c k·ª≥ ng·∫Øn g·ªçn**, ch·ªâ t·∫≠p trung v√†o **tr·ªçng t√¢m** v√† kh√¥ng ƒë∆∞·ª£c d√†i h∆°n 2 ƒëo·∫°n vƒÉn. **B·∫Øt bu·ªôc** s·ª≠ d·ª•ng Markdown ƒë·ªÉ **in ƒë·∫≠m** (highlight) nh·ªØng t·ª´ kh√≥a ho·∫∑c √Ω ch√≠nh quan tr·ªçng nh·∫•t.";
    
    // 2. T·∫°o m·∫£ng contents
    let contents = [];
    
    // 3. ƒê∆∞a l·ªãch s·ª≠ chat v√†o m·∫£ng contents (Chuy·ªÉn "assistant" th√†nh "model")
    // Client g·ª≠i { role: "user/assistant", text: "..." }
    history.forEach(item => {
        contents.push({
            role: item.role === "user" ? "user" : "model",
            parts: [{ text: item.text }]
        });
    });
    
    // 4. G·∫Øn system instruction v√†o tin nh·∫Øn ng∆∞·ªùi d√πng cu·ªëi c√πng (tin nh·∫Øn m·ªõi nh·∫•t)
    // L·∫•y tin nh·∫Øn ng∆∞·ªùi d√πng cu·ªëi c√πng (tin nh·∫Øn m·ªõi nh·∫•t)
    const lastUserIndex = contents.length - 1;
    if (contents[lastUserIndex].role === "user") {
         // Th√™m system instruction v√† prompt m·ªõi v√†o tin nh·∫Øn user cu·ªëi c√πng
        contents[lastUserIndex].parts[0].text = systemInstruction + "\n\nTin nh·∫Øn: " + message;
    }

    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
});

// üßÆ Gi·∫£i to√°n API (H·ªñ TR·ª¢ LATEX & HIGHLIGHT)
app.post("/api/math", async (req, res) => {
    const { question } = req.body;
    if (!question) return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n." });
    
    // Y√™u c·∫ßu d√πng LaTeX, r√∫t g·ªçn c√°c b∆∞·ªõc, v√† highlight k·∫øt qu·∫£
    const prompt = `H√£y gi·∫£i b√†i to√°n sau b·∫±ng ti·∫øng Vi·ªát. **B·∫ÆT BU·ªòC** s·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX (b√™n trong c·∫∑p d·∫•u $) cho t·∫•t c·∫£ c√°c bi·ªÉu th·ª©c to√°n h·ªçc. Tr√¨nh b√†y l·ªùi gi·∫£i theo c√°c **b∆∞·ªõc C·ª∞C K·ª≤ NG·∫ÆN G·ªåN**, ch·ªâ n√™u c√°c ph√©p t√≠nh v√† l√Ω do ch√≠nh. D√πng **in ƒë·∫≠m** ƒë·ªÉ l√†m n·ªïi b·∫≠t **k·∫øt qu·∫£ cu·ªëi c√πng** v√† c√°c **c√¥ng th·ª©c quan tr·ªçng**. B√†i to√°n: ${question}`;
    
    // T·∫°o c·∫•u tr√∫c contents cho b√†i to√°n
    const contents = [{ role: "user", parts: [{ text: prompt }] }];
    
    const reply = await callGeminiModel(contents); // Truy·ªÅn contents thay v√¨ prompt
    res.json({ response: reply });
});

// =============================================================
// üöÄ Kh·ªüi ƒë·ªông Server
// =============================================================
app.listen(PORT, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (S·ª≠ d·ª•ng model: ${GEMINI_MODEL})`);
});