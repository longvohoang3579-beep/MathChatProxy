import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from "cors";
// ‚úÖ S·ª≠a l·ªói import YoutubeLoader
import { YoutubeLoader } from "@langchain/community/document_loaders/web/youtube";

dotenv.config();
const app = express();

// --- Middleware --- [cite: 1294-1296]
app.use(cors());
app.use(bodyParser.json({ limit: "50mb" }));
app.use(express.static(".")); // Ph·ª•c v·ª• file tƒ©nh t·ª´ th∆∞ m·ª•c g·ªëc

// --- Configuration --- [cite: 1297-1303]
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-1.5-flash"; // Model h·ªó tr·ª£ ·∫£nh
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY is not set!");

// --- Helper Functions --- [cite: 1304-1371]

async function callGeminiAPI(contents, useWebSearch = false) { // Th√™m c·ªù useWebSearch
    if (!GEMINI_API_KEY) return "‚ùå Error: GEMINI_API_KEY is missing.";
    try {
        const tools = useWebSearch ? [{ "google_search_retrieval": {} }] : undefined; // K√≠ch ho·∫°t search n·∫øu c·∫ßn
        const body = JSON.stringify({ contents, tools }); // Th√™m tools v√†o body

        const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
            method: "POST", headers: { "Content-Type": "application/json" }, body: body,
        });
        const data = await response.json();

        // X·ª≠ l√Ω Function Calling (n·∫øu Gemini y√™u c·∫ßu t√¨m ki·∫øm) - T·∫°m th·ªùi ƒë∆°n gi·∫£n h√≥a
        const functionCallPart = data.candidates?.[0]?.content?.parts?.find(part => part.functionCall);
        if (functionCallPart && functionCallPart.functionCall.name === 'google_search_retrieval') {
             console.log("Gemini requested function call (web search), responding automatically...");
             // T·ª± ƒë·ªông g·ªçi l·∫°i API v·ªõi function response (b∆∞·ªõc n√†y quan tr·ªçng)
             const functionResponse = {
                 functionResponse: {
                     name: functionCallPart.functionCall.name,
                     // N·ªôi dung response th∆∞·ªùng tr·ªëng ho·∫∑c l√† x√°c nh·∫≠n, t√πy theo API
                     response: { name: functionCallPart.functionCall.name, content: "Web search results will be used by the model." }
                 }
             };
             // Quan tr·ªçng: Th√™m function response v√†o cu·ªëi m·∫£ng contents hi·ªán t·∫°i
             contents.push({ role: "function", parts: [functionResponse] });
             // G·ªçi l·∫°i API l·∫ßn 2 v·ªõi response
             const response2 = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
                method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ contents }), // G·ª≠i l·∫°i contents ƒë√£ c·∫≠p nh·∫≠t
             });
             const data2 = await response2.json();
             if (!response2.ok) throw new Error(data2.error?.message || `Gemini Function Response Error ${response2.status}`);
             if (data2.candidates && data2.candidates[0].finishReason === 'SAFETY') return "‚ùå Ph·∫£n h·ªìi b·ªã ch·∫∑n v√¨ l√Ω do an to√†n sau khi t√¨m ki·∫øm.";
             return data2.candidates?.[0]?.content?.parts?.[0]?.text || "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi h·ª£p l·ªá sau khi t√¨m ki·∫øm.";
        }

        // X·ª≠ l√Ω ph·∫£n h·ªìi th√¥ng th∆∞·ªùng
        if (!response.ok) {
            console.error("‚ùå Gemini API Error:", data);
            const errorMsg = data.error?.message || 'Check API Key & ensure "Vertex AI API" + Billing are enabled.';
            return `‚ùå HTTP Error ${response.status}: ${errorMsg}`;
        }
        if (data.candidates && data.candidates[0].finishReason === 'SAFETY') return "‚ùå Ph·∫£n h·ªìi b·ªã ch·∫∑n v√¨ l√Ω do an to√†n.";
        return data.candidates?.[0]?.content?.parts?.[0]?.text || "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi h·ª£p l·ªá.";
    } catch (error) {
        console.error("üî• Gemini Connection/Processing Error:", error);
        // Tr·∫£ v·ªÅ l·ªói chi ti·∫øt h∆°n cho client
        return `‚ùå L·ªói k·∫øt n·ªëi/x·ª≠ l√Ω Gemini: ${error.message}`;
    }
}


function buildGeminiContent(text, image, systemInstruction) {
  let parts = [{ text: `${systemInstruction}\n\nUser Input: "${text || "No text provided."}"` }];
  if (image) {
    // S·ª≠a l·ªói regex ƒë·ªÉ b·∫Øt ƒë√∫ng mimeType v√† data
    const match = image.match(/data:(image\/.+);base64,(.*)/);
    if (match && match[1] && match[2]) {
      const mimeType = match[1];
      const data = match[2];
      parts.push({ inlineData: { mimeType, data } });
    } else {
        console.warn("‚ö†Ô∏è Invalid image data format provided. Expected data:image/...;base64,...");
        parts.push({ text: "[Invalid Image Data Format]" });
    }
  }
  return [{ role: "user", parts }];
}

async function translateToEnglish(text) {
    if (!text || /^[a-zA-Z0-9\s.,?!'-]*$/.test(text)) return text;
    try {
        const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&q=${encodeURIComponent(text)}`;
        const response = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0' } });
        if (!response.ok) throw new Error(`Translate API error: ${response.status}`);
        const data = await response.json();
        return data[0]?.map(item => item[0]).join('') || text;
    } catch (error) { console.error("‚ùå Translation Error:", error.message); return text; }
}

async function handleGeminiRequest(req, res, systemInstruction, inputField = 'message', useWebSearch = false) {
    const { image } = req.body;
    // L·∫•y text t·ª´ nhi·ªÅu tr∆∞·ªùng c√≥ th·ªÉ c√≥
    const text = req.body[inputField]
              || req.body['message']
              || req.body['question']
              || req.body['textToSummarize']
              || req.body['textToConvert']
              || req.body['stockSymbol']; // Th√™m stockSymbol
    try {
        // ∆Øu ti√™n systemInstruction g·ª≠i t·ª´ client (cho personality)
        const finalSystemInstruction = req.body.systemInstruction || systemInstruction;
        const contents = buildGeminiContent(text, image, finalSystemInstruction);
        const reply = await callGeminiAPI(contents, useWebSearch); // Truy·ªÅn c·ªù useWebSearch
        res.json({ response: reply });
    } catch (error) {
         console.error(`Error in handleGeminiRequest (${req.path}):`, error);
         res.status(500).json({ response: `Server error: ${error.message}` });
    }
}


// --- API Endpoints ---
app.post("/api/chat", (req, res) => {
    const langName = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá' }[req.body.language] || 'Ti·∫øng Vi·ªát';
    const baseInstruction = `You are a helpful AI assistant. Respond in **${langName}**. Be concise, use markdown, highlight <mark class="highlight">...</mark>. Analyze image if provided.`;
    handleGeminiRequest(req, res, baseInstruction, 'message'); // S·∫Ω b·ªã ghi ƒë√® b·ªüi client n·∫øu c√≥ personality
});

app.post("/api/math", (req, res) => {
    const instruction = `Solve math in Vietnamese. Show steps & final result. Use LaTeX ($...$) and <mark class="highlight">...</mark>. Analyze image if provided.`;
    handleGeminiRequest(req, res, instruction, 'question');
});

app.post("/api/edit-image", (req, res) => { // Gemini generates prompt for Pollinations
    const instruction = `Analyze image and user text. Generate ONLY a detailed English prompt for an image generation model (like Pollinations) to create the edited image.`;
    handleGeminiRequest(req, res, instruction, 'message');
});

app.post("/api/summarize-text", (req, res) => { // Notetaker
    const instruction = "You are a notetaker. Extract key decisions, action items, main topics from the text. Format in Vietnamese with headings (## Decisions, ## Actions, ## Topics) and bullet points.";
    handleGeminiRequest(req, res, instruction, 'textToSummarize');
});

app.post("/api/generate-flashcards", (req, res) => {
    const instruction = "Based on the provided text, create flashcards in Vietnamese. Format clearly: 'Q: [Question]\\nA: [Answer]' separated by TWO newlines.";
    handleGeminiRequest(req, res, instruction, 'textToConvert');
});

app.post("/api/generate-mindmap", (req, res) => {
    const instruction = "Based on the provided text, generate a mind map structure in Vietnamese using markdown hierarchical lists (* Topic\n  * Subtopic\n    * Detail). Make it concise and logical.";
    handleGeminiRequest(req, res, instruction, 'textToConvert');
});

app.post("/api/summarize-youtube", async (req, res) => {
    const { youtubeUrl } = req.body;
    if (!youtubeUrl) return res.status(400).json({ response: "YouTube URL required." });
    try {
        const loader = YoutubeLoader.createFromUrl(youtubeUrl, { language: "en", addVideoInfo: true });
        const docs = await loader.load();
        let videoInfo = docs[0]?.metadata?.title ? `Video Title: ${docs[0].metadata.title}\nChannel: ${docs[0].metadata.author}\n\n` : "";
        const transcript = docs.map(doc => doc.pageContent).join("\n");
        if (!transcript) return res.status(500).json({ response: "Could not get transcript." });
        const instruction = "Summarize key points of the YouTube transcript in Vietnamese. Start with title/channel.";
        // Gi·ªõi h·∫°n ƒë·ªô d√†i transcript g·ª≠i cho Gemini
        const contents = buildGeminiContent(videoInfo + "Transcript:\n" + transcript.substring(0, 15000), null, instruction);
        const summary = await callGeminiAPI(contents);
        res.json({ response: summary });
    } catch (error) {
        console.error("‚ùå YouTube Summarize Error:", error);
        const errorMsg = error.message.includes('transcript disabled') ? "Transcript disabled." : error.message.includes('404') ? "Video not found." : error.message;
        res.status(500).json({ response: `Error summarizing video: ${errorMsg}` });
    }
});

app.post("/api/analyze-stock", (req, res) => {
    const instruction = `
You are a stock analyst AI. Analyze the symbol based on knowledge and recent web search.
Provide (in Vietnamese):
1.  **Trend:** Recent trend & timeframe.
2.  **Factors:** 1-2 key influencing factors.
3.  **Related:** Suggest 1-2 similar stocks.
4.  **Chart Concept:** Suggest search query for a *general illustrative chart* (e.g., "stock chart uptrend example").
5.  **Disclaimer:** MUST include: "**Disclaimer:** AI analysis, not financial advice. Consult a professional."`;
    // G·ªçi handleGeminiRequest v·ªõi c·ªù useWebSearch = true
    handleGeminiRequest(req, res, instruction, 'stockSymbol', true);
});

app.post("/api/pollinations-image", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "A description is required." });
  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
      console.error("Pollinations Image Error:", error);
    res.status(500).json({ message: "Could not create image via Pollinations." });
  }
});

app.post("/api/pollinations-frames", async (req, res) => {
    // Gi·ªØ nguy√™n placeholder ho·∫∑c logic t·∫°o frame c·ªßa b·∫°n
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ message: "A description is required." });
    try {
        const translatedPrompt = await translateToEnglish(prompt);
        // Logic t·∫°o frames (hi·ªán t·∫°i l√† placeholder tr·∫£ v·ªÅ m·∫£ng r·ªóng)
        console.warn("‚ö†Ô∏è /api/pollinations-frames needs implementation.");
        res.json({ frames: [] });
    } catch (error) {
        res.status(500).json({ message: "Could not create video frames." });
    }
});

// --- Start Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ Server running at http://localhost:${PORT}`));