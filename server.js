// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 2.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";

dotenv.config();
const app = express();
// TƒÉng gi·ªõi h·∫°n payload l√™n 50MB ƒë·ªÉ ch·ª©a ·∫£nh Base64
app.use(bodyParser.json({ limit: "50mb" }));
// Ph·ª•c v·ª• file tƒ©nh (index.html c√πng th∆∞ m·ª•c)
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-1.5-flash"; // N√¢ng c·∫•p l√™n 1.5 flash ƒë·ªÉ ph√¢n t√≠ch ·∫£nh t·ªët h∆°n
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`; // API URL m·ªõi cho v1beta

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
}

// ======== H√†m g·ªçi Gemini API (retry/backoff) ========
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";

  try {
    for (let i = 0; i < 3; i++) {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text;
        }
        if (data.error) {
          console.error("‚ùå L·ªói API t·ª´ Gemini:", data.error);
          return `‚ùå L·ªói API t·ª´ Gemini: ${data.error.message}`;
        }
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p b·ªã block do safety settings
        if (data.candidates?.[0]?.finishReason === 'SAFETY') {
            console.warn("‚ùå Gemini ƒë√£ ch·∫∑n ph·∫£n h·ªìi do c√†i ƒë·∫∑t an to√†n.");
            return "‚ùå Gemini ƒë√£ ch·∫∑n ph·∫£n h·ªìi do vi ph·∫°m ch√≠nh s√°ch an to√†n.";
        }
        return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
      }

      const errorText = await response.text();
      console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);

      if (response.status === 429 || response.status >= 500) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.`;
    }
    return "‚ùå ƒê√£ th·ª≠ l·∫°i nh∆∞ng v·∫´n l·ªói khi g·ªçi Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)";
  }
}

// ======== H√†m build content parts (text + inline image) ========
function buildContentParts(text, image, systemInstruction) {
    let userParts = [];
    // Th√™m system instruction v√†o m·ªôt turn ri√™ng ƒë·ªÉ ho·∫°t ƒë·ªông t·ªët h∆°n v·ªõi model m·ªõi
    const contents = [];
    if (systemInstruction) {
        contents.push({
            role: "user",
            parts: [{ text: "L·ªánh h·ªá th·ªëng: " + systemInstruction }]
        });
        contents.push({ role: "model", parts: [{ text: "T√¥i ƒë√£ hi·ªÉu v√† s·∫Ω tu√¢n theo ch·ªâ d·∫´n." }] });
    }

    const textPart = text || (image ? "Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ chi ti·∫øt b·ª©c ·∫£nh n√†y." : "");
    if (textPart) {
        userParts.push({ text: textPart });
    }

    if (image) {
        const parts = image.split(',');
        const mimeTypeMatch = parts[0].match(/data:(.*?);/);
        if (mimeTypeMatch && parts.length === 2) {
            userParts.push({
                inlineData: {
                    mimeType: mimeTypeMatch[1],
                    data: parts[1]
                }
            });
        } else {
            throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
        }
    }
    contents.push({ role: "user", parts: userParts });
    return contents;
}


// ======== D·ªãch sang ti·∫øng Anh (fallback: tr·∫£ text g·ªëc) ========
async function translateToEnglish(text) {
  if (!text) return "";
  if (GEMINI_API_KEY) {
    try {
      const promptTranslate = `Translate the following text to English. Return ONLY the translated text, without any introductory phrases or quotes. Text: "${text}"`;
      const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
      const response = await callGeminiModel(contents);
      if (response && !response.startsWith("‚ùå")) {
        return response.replace(/^"|"$/g, '').trim();
      }
      return text; // Fallback to original text if translation fails
    } catch (err) {
      console.error("L·ªói d·ªãch v·ªõi Gemini:", err);
      return text;
    }
  }
  return text; // Fallback if no Gemini key
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});


// ======== H√†m t·∫£i 1 khung h√¨nh v·ªõi Retry (T·ªëi ƒëa 3 l·∫ßn) ========
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const r = await fetch(url, { timeout: 45000 }); // Th√™m timeout 45 gi√¢y
            if (r.ok) {
                const buffer = Buffer.from(await r.arrayBuffer());
                return `data:image/jpeg;base64,${buffer.toString("base64")}`;
            }
            if (attempt < maxRetries) {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói (HTTP ${r.status}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
                await new Promise(resolve => setTimeout(resolve, 1500 * attempt));
            } else {
                console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠ (HTTP ${r.status}). B·ªè qua.`);
            }
        } catch (e) {
            if (attempt < maxRetries) {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói m·∫°ng (${e.name}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
                await new Promise(resolve => setTimeout(resolve, 1500 * attempt));
            } else {
                console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠: ${e.message}. B·ªè qua.`);
            }
        }
    }
    return null; // Th·∫•t b·∫°i sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠
}

// ============================================================
// üéûÔ∏è API T·∫†O VIDEO T·ª™ ·∫¢NH G·ªêC (T√çNH NƒÇNG M·ªöI)
// ============================================================
app.post("/api/video-from-image", async (req, res) => {
    const { image, prompt } = req.body;
    if (!image) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ·∫£nh g·ªëc." });
    }

    try {
        // 1. D√πng Gemini ƒë·ªÉ t·∫°o prompt chi ti·∫øt t·ª´ ·∫£nh
        console.log("ü§ñ B·∫Øt ƒë·∫ßu d√πng Gemini ƒë·ªÉ ph√¢n t√≠ch ·∫£nh...");
        const geminiSystemInstruction = `Analyze this image and describe it in a highly detailed, vivid, and artistic English prompt suitable for an AI image generator like Pollinations.ai. Focus on the main subject, background, style, colors, lighting, and composition. If the user provides an additional prompt, integrate it creatively into the description. Return ONLY the final English prompt, nothing else.`;
        
        let contents = [];
        const userParts = [];

        // Th√™m prompt b·ªï sung c·ªßa ng∆∞·ªùi d√πng n·∫øu c√≥
        const textForGemini = prompt ? `User's additional instruction: "${prompt}"` : "Describe the image.";
        userParts.push({ text: textForGemini });

        // Th√™m ·∫£nh Base64
        const parts = image.split(',');
        const mimeTypeMatch = parts[0].match(/data:(.*?);/);
        if (mimeTypeMatch && parts.length === 2) {
            userParts.push({ inlineData: { mimeType: mimeTypeMatch[1], data: parts[1] } });
        } else {
            return res.status(400).json({ message: "ƒê·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá." });
        }
        
        // C·∫•u tr√∫c contents cho Gemini
        contents.push({ role: "user", parts: [{ text: "System instruction: " + geminiSystemInstruction }]});
        contents.push({ role: "model", parts: [{ text: "Understood. I will provide a detailed English prompt based on the image and user instructions." }]});
        contents.push({ role: "user", parts: userParts });

        const basePromptFromImage = await callGeminiModel(contents);

        if (!basePromptFromImage || basePromptFromImage.startsWith("‚ùå")) {
            console.error("L·ªói t·ª´ Gemini khi ph√¢n t√≠ch ·∫£nh:", basePromptFromImage);
            return res.status(500).json({ message: "Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh b·∫±ng AI. " + basePromptFromImage });
        }
        console.log("‚úÖ Gemini ƒë√£ t·∫°o prompt th√†nh c√¥ng:", basePromptFromImage);

        // 2. D√πng prompt chi ti·∫øt ƒë·ªÉ t·∫°o c√°c khung h√¨nh
        const framesCount = 12;
        console.log(`B·∫Øt ƒë·∫ßu t·∫£i ${framesCount} khung h√¨nh cho prompt v·ª´a t·∫°o...`);

        const downloadPromises = [];
        for (let i = 0; i < framesCount; i++) {
            const variation = `${basePromptFromImage}, motion frame ${i + 1} of ${framesCount}, cinematic, high detail, 8k`;
            const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=512&height=512`;
            downloadPromises.push(fetchFrameWithRetry(url, i + 1));
        }

        const frames = await Promise.all(downloadPromises);
        const validFrames = frames.filter(f => f); // L·ªçc b·ªè c√°c gi√° tr·ªã null

        if (validFrames.length < 8) {
            console.error(`‚ùå Ch·ªâ t·∫£i ƒë∆∞·ª£c ${validFrames.length}/${framesCount} khung h√¨nh.`);
            return res.status(500).json({ message: `‚ùå Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh (${validFrames.length}/${framesCount}). Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c.` });
        }

        console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng ${validFrames.length} khung h√¨nh.`);
        res.json({ frames: validFrames });

    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω chung khi t·∫°o video t·ª´ ·∫£nh:", error);
        res.status(500).json({ message: "‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh tr√™n server. Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt." });
    }
});


// ============================================================
// üí¨ CHAT
// ============================================================
app.post("/api/chat", async (req, res) => {
  const { message, history, language, image } = req.body;
  if (!message && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat ho·∫∑c ·∫£nh." });

  const languageMap = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá' };
  const langName = languageMap[language] || languageMap['vi'];

  const systemInstruction = `You are a friendly AI assistant. Respond in **${langName}**. Keep answers **CONCISE and FOCUSED**. If there is a key point, wrap it in <mark class="highlight">...</mark>. DO NOT use introductory fluff. If an image is provided, analyze it and answer based on its content.`;

  try {
    let conversationHistory = [];
    if (Array.isArray(history)) {
      history.forEach(item => {
        const role = item.role === "assistant" ? "model" : item.role;
        conversationHistory.push({ role: role, parts: [{ text: item.text }] });
      });
    }

    const contents = buildContentParts(message, image, systemInstruction);
    // K·∫øt h·ª£p history v√† request m·ªõi
    const finalContents = [...conversationHistory, ...contents];

    const reply = await callGeminiModel(finalContents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω chat:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu chat tr√™n server." });
  }
});

// ============================================================
// üßÆ GI·∫¢I TO√ÅN
// ============================================================
app.post("/api/math", async (req, res) => {
  const { question, image } = req.body;
  if (!question && !image) return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n ho·∫∑c ·∫£nh b√†i to√°n." });

  const systemInstruction = `Solve the following math problem as concisely as possible in Vietnamese. Show only the **main steps** and the **final result**. Use LaTeX for formulas ($...$). Highlight important results and concepts with <mark class="highlight">...</mark>. If an image is provided, analyze it to solve the problem shown.`;

  try {
    const contents = buildContentParts(question, image, systemInstruction);
    const reply = await callGeminiModel(contents[contents.length - 1].parts); // G·ª≠i ph·∫ßn user m·ªõi nh·∫•t
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω to√°n:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu to√°n tr√™n server." });
  }
});


// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
  if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. C√°c t√≠nh nƒÉng AI s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
});
server.timeout = 600000; // TƒÉng timeout c·ªßa server l√™n 10 ph√∫t ƒë·ªÉ x·ª≠ l√Ω video