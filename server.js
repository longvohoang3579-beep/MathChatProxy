// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 2.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();

// ===== Cho ph√©p frontend k·∫øt n·ªëi (CORS) =====
app.use(cors());

// ===== C·∫•u h√¨nh nh·∫≠n d·ªØ li·ªáu l·ªõn =====
app.use(bodyParser.json({ limit: "50mb" }));

// ===== Th√™m static ƒë·ªÉ load ƒë∆∞·ª£c chat.html, index.html,... =====
app.use(express.static("./"));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-1.5-flash";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!");
}

// ===== G·ªçi Gemini API =====
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ contents }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå L·ªói HTTP ${response.status}: ${errorText}`);
      return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini.`;
    }

    const data = await response.json();
    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
      return data.candidates[0].content.parts[0].text;
    }
    if (data.candidates?.[0]?.finishReason === "SAFETY") {
      return "‚ùå Gemini ƒë√£ ch·∫∑n ph·∫£n h·ªìi do vi ph·∫°m ch√≠nh s√°ch an to√†n.";
    }
    return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini.";
  }
}

// ===== Chu·∫©n b·ªã d·ªØ li·ªáu ng∆∞·ªùi d√πng =====
function buildContentParts(text, image, systemInstruction) {
  let userParts = [];
  const textPart =
    systemInstruction +
    "\n\nTin nh·∫Øn: " +
    (text || "Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ chi ti·∫øt b·ª©c ·∫£nh n√†y.");
  userParts.push({ text: textPart });

  if (image) {
    const parts = image.split(",");
    const mimeTypeMatch = parts[0].match(/data:(.*?);/);
    if (mimeTypeMatch && parts.length === 2) {
      userParts.push({
        inlineData: { mimeType: mimeTypeMatch[1], data: parts[1] },
      });
    } else {
      throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
    }
  }
  return userParts;
}

// ===== D·ªãch sang ti·∫øng Anh =====
async function translateToEnglish(text) {
  if (!text) return "";
  if (GEMINI_API_KEY) {
    try {
      const promptTranslate = `D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Anh, ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ d·ªãch. KH√îNG TH√äM B·∫§T K·ª≤ L·ªúI N√ìI ƒê·∫¶U HAY L·ªúI K·∫æT N√ÄO. VƒÉn b·∫£n: "${text}"`;
      const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
      const response = await callGeminiModel(contents);
      if (response && !response.startsWith("‚ùå")) {
        return response.replace(/^"|"$/g, "").trim();
      }
      return text;
    } catch (err) {
      console.error("L·ªói d·ªãch v·ªõi Gemini:", err);
      return text;
    }
  }
  try {
    const url =
      "https://api.mymemory.translated.net/get?q=" +
      encodeURIComponent(text) +
      "&langpair=vi|en";
    const r = await fetch(url);
    const d = await r.json();
    return d.responseData?.translatedText || text;
  } catch (e) {
    return text;
  }
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// ===== T·∫£i khung h√¨nh =====
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const r = await fetch(url, { timeout: 45000 });
      if (r.ok) {
        const buffer = Buffer.from(await r.arrayBuffer());
        return `data:image/jpeg;base64,${buffer.toString("base64")}`;
      }
      if (attempt < maxRetries)
        await new Promise((r) => setTimeout(r, 1500 * attempt));
    } catch (e) {
      console.warn(`‚ö†Ô∏è Khung h√¨nh ${index} l·ªói m·∫°ng (${e.name}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
      if (attempt < maxRetries) await new Promise((r) => setTimeout(r, 1500 * attempt));
    }
  }
  console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠. B·ªè qua.`);
  return null;
}

// ===== API T·∫†O KHUNG H√åNH =====
app.post("/api/pollinations-frames", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });

  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const framesCount = 12;
    const batchSize = 4;
    const allFrames = [];

    console.log(`B·∫Øt ƒë·∫ßu t·∫£i ${framesCount} khung h√¨nh cho prompt: "${translatedPrompt}"`);

    for (let i = 0; i < framesCount; i += batchSize) {
      const batchPromises = [];
      for (let j = i; j < i + batchSize && j < framesCount; j++) {
        const variation = `${translatedPrompt}, motion frame ${j + 1} of ${framesCount}, cinematic`;
        const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(
          variation
        )}?nologo=true&width=512&height=512`;
        batchPromises.push(fetchFrameWithRetry(url, j + 1));
      }
      const batchResults = await Promise.all(batchPromises);
      allFrames.push(...batchResults);
    }

    const validFrames = allFrames.filter((f) => f);
    if (validFrames.length < 8) {
      return res
        .status(500)
        .json({ message: `Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh (${validFrames.length}/${framesCount}).` });
    }

    console.log(`‚úÖ T·∫£i th√†nh c√¥ng ${validFrames.length} khung h√¨nh.`);
    res.json({ frames: validFrames });
  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω khung h√¨nh:", error);
    res.status(500).json({ message: "L·ªói x·ª≠ l√Ω chung tr√™n Server." });
  }
});

// ============================================================
// üí¨ CHAT
// ============================================================
app.post("/api/chat", async (req, res) => {
  const { message, history, language, image } = req.body;
  if (!message && !image)
    return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat ho·∫∑c ·∫£nh." });

  const languageMap = {
    vi: "Ti·∫øng Vi·ªát",
    en: "English (Ti·∫øng Anh)",
    "zh-CN": "ÁÆÄ‰Ωì‰∏≠Êñá (Ti·∫øng Trung Gi·∫£n th·ªÉ)",
  };
  const langName = languageMap[language] || languageMap["vi"];

  const systemInstruction = `
B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng **${langName}**.
- Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN, TR·ªåNG T√ÇM**, ch·ªâ t·∫≠p trung v√†o c√¢u h·ªèi.
- N·∫øu c√≥ √Ω ch√≠nh/k·∫øt qu·∫£, b·ªçc trong <mark class="highlight">...</mark>.
- KH√îNG th√™m gi·ªõi thi·ªáu hay ƒëo·∫°n lan man.
- N·∫øu c√≥ ·∫£nh, ph√¢n t√≠ch v√† tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ·∫£nh.
`;

  let contents = [];
  if (Array.isArray(history)) {
    history.forEach((item) => {
      const role = item.role === "assistant" ? "model" : item.role;
      contents.push({ role: role, parts: [{ text: item.text }] });
    });
  }

  try {
    const userParts = buildContentParts(message, image, systemInstruction);
    contents.push({ role: "user", parts: userParts });
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω chat:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu chat tr√™n server." });
  }
});

// ============================================================
// üßÆ GI·∫¢I TO√ÅN
// ============================================================
app.post("/api/math", async (req, res) => {
  const { question, image } = req.body;
  if (!question && !image)
    return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n ho·∫∑c ·∫£nh b√†i to√°n." });

  const systemInstruction = `
H√£y gi·∫£i b√†i to√°n sau **ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ**, b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu.
- Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**.
- Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$).
- T√¥ v√†ng c√°c k·∫øt qu·∫£/√Ω ch√≠nh b·∫±ng <mark class="highlight">...</mark>.
- N·∫øu c√≥ ·∫£nh, ph√¢n t√≠ch ·∫£nh ƒë·ªÉ gi·∫£i b√†i to√°n trong ·∫£nh.
`;

  try {
    const userParts = buildContentParts(question, image, systemInstruction);
    const contents = [{ role: "user", parts: userParts }];
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω to√°n:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu to√°n tr√™n server." });
  }
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
});
server.timeout = 300000;
