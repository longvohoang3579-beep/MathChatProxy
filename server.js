// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 2.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { exec } from "child_process";

dotenv.config();
const app = express();
// TƒÉng gi·ªõi h·∫°n payload l√™n 50MB ƒë·ªÉ ch·ª©a ·∫£nh Base64
app.use(bodyParser.json({ limit: "50mb" }));
// Ph·ª•c v·ª• file tƒ©nh (index.html c√πng th∆∞ m·ª•c)
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-2.5-flash";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
}

// ======== H√†m g·ªçi Gemini API (retry/backoff) ========
async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";

  try {
    for (let i = 0; i < 3; i++) {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
          return data.candidates[0].content.parts[0].text;
        }
        if (data.error) {
          console.error("‚ùå L·ªói API t·ª´ Gemini:", data.error);
          return `‚ùå L·ªói API t·ª´ Gemini: ${data.error.message}`;
        }
        return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
      }

      const errorText = await response.text();
      console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);

      if (response.status === 429 || response.status >= 500) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.`;
    }
    return "‚ùå ƒê√£ th·ª≠ l·∫°i nh∆∞ng v·∫´n l·ªói khi g·ªçi Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)";
  }
}

// ======== H√†m build content parts (text + inline image) ========
function buildContentParts(text, image, systemInstruction) {
  let userParts = [];
  const textPart = systemInstruction + "\n\nTin nh·∫Øn: " + (text || "Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ chi ti·∫øt b·ª©c ·∫£nh n√†y.");
  userParts.push({ text: textPart });

  if (image) {
    const parts = image.split(',');
    const mimeTypeMatch = parts[0].match(/data:(.*?);/);
    if (mimeTypeMatch && parts.length === 2) {
      userParts.push({
        inlineData: {
          mimeType: mimeTypeMatch[1],
          data: parts[1]
        }
      });
    } else {
      throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
    }
  }
  return userParts;
}

// ======== D·ªãch sang ti·∫øng Anh (fallback: tr·∫£ text g·ªëc) ========
async function translateToEnglish(text) {
  if (!text) return "";
  // N·∫øu c√≥ Gemini key, d√πng Gemini ƒë·ªÉ d·ªãch (nh∆∞ b·∫°n y√™u c·∫ßu ban ƒë·∫ßu)
  if (GEMINI_API_KEY) {
    try {
      const promptTranslate = `D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Anh, ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë√£ d·ªãch. KH√îNG TH√äM B·∫§T K·ª≤ L·ªúI N√ìI ƒê·∫¶U HAY L·ªúI K·∫æT N√ÄO.
VƒÉn b·∫£n: "${text}"`;
      const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
      const response = await callGeminiModel(contents);
      if (response && !response.startsWith("‚ùå")) {
        return response.replace(/^"|"$/g, '').trim();
      } else {
        return text;
      }
    } catch (err) {
      console.error("L·ªói d·ªãch v·ªõi Gemini:", err);
      return text;
    }
  }

  // N·∫øu kh√¥ng c√≥ GEMINI_API_KEY, fallback b·∫±ng MyMemory (mi·ªÖn ph√≠) ‚Äî v·∫´n c√≥ th·ªÉ b·ªã gi·ªõi h·∫°n
  try {
    const url = "https://api.mymemory.translated.net/get?q=" + encodeURIComponent(text) + "&langpair=vi|en";
    const r = await fetch(url);
    const d = await r.json();
    return d.responseData?.translatedText || text;
  } catch (e) {
    return text;
  }
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });

  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// ============================================================
// üéûÔ∏è API T·∫†O VIDEO (Pollinations -> 20 frames -> ffmpeg -> mp4)
// ============================================================
app.post("/api/pollinations-video", async (req, res) => {
  const { prompt, image } = req.body;
  if (!prompt && !image) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ho·∫∑c t·∫£i ·∫£nh." });

  try {
    const translatedPrompt = await translateToEnglish(prompt || "animation from image");
    const framesCount = 20; // s·ªë khung
    const framesDir = path.join(process.cwd(), "temp_frames");

    if (!fs.existsSync(framesDir)) fs.mkdirSync(framesDir, { recursive: true });

    // t·∫°o 20 prompt bi·∫øn th·ªÉ ƒë·ªÉ Pollinations sinh kh√°c nhau
    const downloads = [];
    for (let i = 0; i < framesCount; i++) {
      const variation = `${translatedPrompt}, variation ${i + 1}, cinematic, high detail`;
      const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=512&height=512`;
      const outPath = path.join(framesDir, `frame_${i}.jpg`);
      // push promise download
      downloads.push(
        (async () => {
          const r = await fetch(url);
          if (!r.ok) throw new Error(`Fetch frame failed: ${r.status}`);
          const buf = Buffer.from(await r.arrayBuffer());
          fs.writeFileSync(outPath, buf);
        })()
      );
    }

    // ch·ªù t·∫£i t·∫•t c·∫£ frames
    await Promise.all(downloads);

    // gh√©p video b·∫±ng ffmpeg (l·ªánh d√πng pattern index)
    const outputPath = path.join(process.cwd(), "temp_frames", `out_${Date.now()}.mp4`);
    // framerate c√≥ th·ªÉ thay ƒë·ªïi (10..15)
    const ffmpegCmd = `ffmpeg -y -framerate 10 -i ${path.join(framesDir, "frame_%d.jpg")} -c:v libx264 -pix_fmt yuv420p ${outputPath}`;
    await new Promise((resolve, reject) => {
      exec(ffmpegCmd, (err, stdout, stderr) => {
        if (err) {
          console.error("ffmpeg error:", err, stderr);
          return reject(err);
        }
        resolve();
      });
    });

    // ƒë·ªçc file mp4 v√† tr·∫£ v·ªÅ base64 data URL
    const videoBuf = fs.readFileSync(outputPath);
    const videoBase64 = videoBuf.toString("base64");
    const dataUrl = `data:video/mp4;base64,${videoBase64}`;

    // cleanup: x√≥a frames v√† mp4 (gi·ªØ an to√†n)
    try {
      fs.readdirSync(framesDir).forEach(f => {
        const p = path.join(framesDir, f);
        fs.unlinkSync(p);
      });
      fs.rmdirSync(framesDir, { recursive: true, force: true });
    } catch (e) {
      // kh√¥ng quan tr·ªçng n·∫øu x√≥a th·∫•t b·∫°i
      console.warn("Kh√¥ng x√≥a s·∫°ch temp_frames:", e);
    }

    res.json({ videoUrl: dataUrl });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o video:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o video." });
  }
});

// ============================================================
// üí¨ CHAT (gi·ªØ nguy√™n behavior: highlight + short responses controlled by systemInstruction)
// ============================================================
app.post("/api/chat", async (req, res) => {
  const { message, history, language, image } = req.body;
  if (!message && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung chat ho·∫∑c ·∫£nh." });

  const languageMap = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English (Ti·∫øng Anh)', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá (Ti·∫øng Trung Gi·∫£n th·ªÉ)' };
  const langName = languageMap[language] || languageMap['vi'];

  const systemInstruction = `
B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng **${langName}**.
- Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN, TR·ªåNG T√ÇM**, ch·ªâ t·∫≠p trung v√†o c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
- N·∫øu c√≥ √Ω ch√≠nh/k·∫øt qu·∫£, h√£y b·ªçc trong <mark class="highlight">...</mark>.
- KH√îNG th√™m gi·ªõi thi·ªáu/ƒëo·∫°n lan man.
- N·∫øu ng∆∞·ªùi d√πng g·ª≠i ·∫£nh, ph√¢n t√≠ch ·∫£nh v√† tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ·∫£nh.
`;

  let contents = [];
  if (Array.isArray(history)) {
    history.forEach(item => {
      const role = item.role === "assistant" ? "model" : item.role;
      contents.push({ role: role, parts: [{ text: item.text }] });
    });
  }

  try {
    const userParts = buildContentParts(message, image, systemInstruction);
    contents.push({ role: "user", parts: userParts });
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω chat:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu chat tr√™n server." });
  }
});

// ============================================================
// üßÆ GI·∫¢I TO√ÅN (Ng·∫Øn g·ªçn, LaTeX, Highlight, h·ªó tr·ª£ ·∫£nh)
// ============================================================
app.post("/api/math", async (req, res) => {
  const { question, image } = req.body;
  if (!question && !image) return res.status(400).json({ response: "Thi·∫øu ƒë·ªÅ to√°n ho·∫∑c ·∫£nh b√†i to√°n." });

  const systemInstruction = `
H√£y gi·∫£i b√†i to√°n sau **ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ**, b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu.
- Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**.
- Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$).
- T√¥ m√†u v√†ng c√°c k·∫øt qu·∫£ v√† √Ω quan tr·ªçng b·∫±ng <mark class="highlight">...</mark>.
- N·∫øu c√≥ ·∫£nh, h√£y ph√¢n t√≠ch ·∫£nh ƒë·ªÉ gi·∫£i b√†i to√°n trong ·∫£nh.
`;

  try {
    const userParts = buildContentParts(question, image, systemInstruction);
    const contents = [{ role: "user", parts: userParts }];
    const reply = await callGeminiModel(contents);
    res.json({ response: reply });
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω to√°n:", error);
    res.status(500).json({ response: "‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu to√°n tr√™n server." });
  }
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
  if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
});
server.timeout = 300000;
