// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 1.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();

// ============================================================
// ‚öôÔ∏è C·∫§U H√åNH MIDDLEWARE
// ============================================================

// ‚úÖ K√≠ch ho·∫°t CORS cho t·∫•t c·∫£ c√°c request
app.use(cors());

// TƒÉng gi·ªõi h·∫°n payload l√™n 50MB ƒë·ªÉ ch·ª©a ·∫£nh Base64
app.use(bodyParser.json({ limit: "50mb" }));

// Ph·ª•c v·ª• file tƒ©nh (index.html c√πng th∆∞ m·ª•c)
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-1.5-flash";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
    console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
}

/**
 * H√†m g·ªçi Gemini API v·ªõi c∆° ch·∫ø retry v√† backoff.
 * @returns {Promise<{text: string, status: number}>}
 */
async function callGeminiModel(contents) {
    if (!GEMINI_API_KEY) return { text: "‚ùå Thi·∫øu GEMINI_API_KEY trong .env. Vui l√≤ng ki·ªÉm tra Server.", status: 500 };

    try {
        for (let i = 0; i < 3; i++) {
            const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ contents }),
            });

            if (response.ok) {
                const data = await response.json();
                const text = data.candidates?.[0]?.content?.parts?.[0]?.text;
                if (text) {
                    return { text, status: 200 };
                }
                if (data.error) {
                    console.error("‚ùå L·ªói API t·ª´ Gemini:", data.error);
                    return { text: `‚ùå L·ªói API t·ª´ Gemini: ${data.error.message}`, status: 400 };
                }
                console.log("Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini:", JSON.stringify(data, null, 2));
                return { text: "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.", status: 500 };
            }

            const errorText = await response.text();
            console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);

            // X·ª≠ l√Ω l·ªói Rate Limit (429) v√† Server Error (5xx)
            if (response.status === 429 || response.status >= 500) {
                const delay = Math.pow(2, i) * 1000;
                await new Promise(resolve => setTimeout(resolve, delay));
                continue;
            }
            // X·ª≠ l√Ω l·ªói API Key sai (400) ho·∫∑c Unauthenticated (401)
            return { text: `‚ùå L·ªói API (${response.status}). Vui l√≤ng ki·ªÉm tra API Key ho·∫∑c tham s·ªë.`, status: response.status };
        }
        return { text: "‚ùå ƒê√£ th·ª≠ l·∫°i nh∆∞ng v·∫´n l·ªói khi g·ªçi Gemini.", status: 500 };
    } catch (error) {
        console.error("üî• L·ªói khi g·ªçi Gemini:", error);
        return { text: "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)", status: 503 };
    }
}

// ======== H√†m build content parts (text + inline image) ========
function buildContentParts(text, image, systemInstruction) {
    let userParts = [];
    const textPart = systemInstruction + "\n\nTin nh·∫Øn: " + (text || "Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ chi ti·∫øt b·ª©c ·∫£nh n√†y.");
    userParts.push({ text: textPart });

    if (image) {
        const parts = image.split(',');
        const mimeTypeMatch = parts[0].match(/data:(.*?);/);
        if (mimeTypeMatch && parts.length === 2) {
            userParts.push({
                inlineData: {
                    mimeType: mimeTypeMatch[1],
                    data: parts[1]
                }
            });
        } else {
            throw new Error("L·ªói ƒë·ªãnh d·∫°ng ·∫£nh Base64 kh√¥ng h·ª£p l·ªá.");
        }
    }
    return userParts;
}

// ======== D·ªãch sang ti·∫øng Anh (fallback: tr·∫£ text g·ªëc) ========
async function translateToEnglish(text) {
    if (!text) return "";
    try {
        const promptTranslate = `Translate the following text to English. Return ONLY the translated text, without any introductory phrases or explanations. Text: "${text}"`;
        const contents = [{ role: "user", parts: [{ text: promptTranslate }] }];
        const { text: response, status } = await callGeminiModel(contents);
        // Tr·∫£ v·ªÅ b·∫£n d·ªãch ch·ªâ khi API th√†nh c√¥ng v√† tr·∫£ v·ªÅ vƒÉn b·∫£n h·ª£p l·ªá.
        return (status === 200 && response && !response.startsWith("‚ùå")) ? response.replace(/^"|"$/g, '').trim() : text;
    } catch (err) {
        console.error("L·ªói d·ªãch v·ªõi Gemini:", err);
        return text;
    }
}

// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
    let { prompt } = req.body;
    if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });
    try {
        const translatedPrompt = await translateToEnglish(prompt);
        // S·ª≠ d·ª•ng m√¥ h√¨nh t·∫°o ·∫£nh ƒë∆°n gi·∫£n, ƒë·ªô ph√¢n gi·∫£i cao h∆°n
        const safePrompt = encodeURIComponent(translatedPrompt);
        const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=768&model=majic-mix-realistic`; // Th√™m model
        res.json({ imageUrl });
    } catch (error) {
        console.error("L·ªói Pollinations:", error);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
    }
});

// ======== H√†m t·∫£i 1 khung h√¨nh v·ªõi Retry (T·ªëi ƒëa 3 l·∫ßn) ========
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const r = await fetch(url);
            if (r.ok) {
                // T·∫£i th√†nh c√¥ng -> chuy·ªÉn sang Base64
                const buffer = Buffer.from(await r.arrayBuffer());
                return `data:image/jpeg;base64,${buffer.toString("base64")}`;
            }
            if (attempt < maxRetries) {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói (HTTP ${r.status}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
                await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            } else {
                console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠ (HTTP ${r.status}). B·ªè qua.`);
            }
        } catch (e) {
            if (attempt < maxRetries) {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Khung h√¨nh ${index} l·ªói m·∫°ng. Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}. Chi ti·∫øt: ${e.message}`);
                await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            } else {
                console.error(`‚ùå L·ªói t·∫£i khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠: ${e.message}. B·ªè qua.`);
            }
        }
    }
    return null; // Th·∫•t b·∫°i
}

// ============================================================
// üñºÔ∏è/üéûÔ∏è API T·∫†O KHUNG H√åNH (Pollinations -> 12 frames Base64)
// ============================================================
app.post("/api/pollinations-frames", async (req, res) => {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });
    try {
        const translatedPrompt = await translateToEnglish(prompt);
        const framesCount = 12;
        console.log(`B·∫Øt ƒë·∫ßu t·∫£i ${framesCount} khung h√¨nh cho prompt: ${translatedPrompt}`);

        // T·∫£i m·ªôt khung h√¨nh g·ªëc ch·∫•t l∆∞·ª£ng cao ƒë·ªÉ l√†m n·ªÅn/h√¨nh chi·∫øu m·ªü ƒë·∫ßu
        const baseImageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(translatedPrompt)}?nologo=true&width=512&height=512&model=majic-mix-realistic`;
        const baseImagePromise = fetchFrameWithRetry(baseImageUrl, 0, 1);

        const downloadPromises = Array.from({ length: framesCount }, (_, i) => {
            const variation = `${translatedPrompt}, motion frame ${i + 1} of ${framesCount}, cinematic, high detail`;
            const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=512&height=512`;
            return fetchFrameWithRetry(url, i + 1);
        });

        const [baseFrame, ...frames] = await Promise.all([baseImagePromise, ...downloadPromises]);
        
        // ƒê·∫£m b·∫£o c√≥ khung n·ªÅn v√† √≠t nh·∫•t 7 khung h√¨nh chuy·ªÉn ƒë·ªông (t·ªïng 8)
        const validFrames = frames.filter(f => f);
        if (baseFrame) validFrames.unshift(baseFrame); // Th√™m khung n·ªÅn v√†o ƒë·∫ßu
        
        if (validFrames.length < 8) {
            console.error(`‚ùå Ch·ªâ t·∫£i ƒë∆∞·ª£c ${validFrames.length}/${framesCount + 1} khung h√¨nh. Y√™u c·∫ßu t·ªëi thi·ªÉu 8.`);
            return res.status(500).json({ message: "‚ùå Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh. Vui l√≤ng th·ª≠ l·∫°i." });
        }
        
        console.log(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng ${validFrames.length} khung h√¨nh.`);
        res.json({ frames: validFrames });
    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω chung t·∫°o khung h√¨nh Base64:", error);
        res.status(500).json({ message: "‚ùå L·ªói x·ª≠ l√Ω chung tr√™n Server." });
    }
});

// ============================================================
// üí¨ CHAT & üßÆ GI·∫¢I TO√ÅN API (S·ª≠ d·ª•ng h√†m chung)
// ============================================================

// X·ª≠ l√Ω logic Gemini chung cho Chat v√† To√°n
async function handleGeminiApi(req, res, systemInstruction) {
    const { message, question, image, language } = req.body;
    const prompt = message || question; // D√πng chung cho c·∫£ 2 mode

    if (!prompt && !image) {
        return res.status(400).json({ response: "Thi·∫øu n·ªôi dung ho·∫∑c ·∫£nh." });
    }

    try {
        const userParts = buildContentParts(prompt, image, systemInstruction);
        const contents = [{ role: "user", parts: userParts }];
        
        const { text: reply, status } = await callGeminiModel(contents);

        if (status === 200) {
            res.json({ response: reply });
        } else {
            // Tr·∫£ l·ªói Gemini v·ªÅ Client v·ªõi m√£ HTTP ch√≠nh x√°c
            res.status(status).json({ response: reply });
        }
    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω API:", error);
        res.status(500).json({ response: `‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu tr√™n server: ${error.message}` });
    }
}

// API Chat
app.post("/api/chat", (req, res) => {
    const languageMap = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá' };
    const langName = languageMap[req.body.language] || languageMap['vi'];
    const systemInstruction = `
        B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng **${langName}**.
        - Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN, TR·ªåNG T√ÇM**.
        - N·∫øu c√≥ √Ω ch√≠nh/k·∫øt qu·∫£, h√£y b·ªçc trong <mark class="highlight">...</mark>.
        - KH√îNG th√™m gi·ªõi thi·ªáu/ƒëo·∫°n lan man.
        - N·∫øu ng∆∞·ªùi d√πng g·ª≠i ·∫£nh, ph√¢n t√≠ch ·∫£nh v√† tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ·∫£nh.
    `;
    handleGeminiApi(req, res, systemInstruction);
});

// API Gi·∫£i To√°n
app.post("/api/math", (req, res) => {
    const systemInstruction = `
        H√£y gi·∫£i b√†i to√°n sau **ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ**, b·∫±ng ti·∫øng Vi·ªát.
        - Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**.
        - Vi·∫øt c√¥ng th·ª©c b·∫±ng LaTeX (d·∫•u $...$ ho·∫∑c $$...$$).
        - T√¥ m√†u v√†ng k·∫øt qu·∫£ quan tr·ªçng b·∫±ng <mark class="highlight">...</mark>.
        - N·∫øu c√≥ ·∫£nh, h√£y ph√¢n t√≠ch ·∫£nh ƒë·ªÉ gi·∫£i b√†i to√°n.
    `;
    handleGeminiApi(req, res, systemInstruction);
});

// ============================================================
// üöÄ KH·ªûI ƒê·ªòNG SERVER
// ============================================================
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
    console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
    if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
});
server.timeout = 300000;