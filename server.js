// ============================================================
// ü§ñ AI PROXY SERVER (Gemini 1.5 Flash + Pollinations + Video)
// ============================================================

import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();

// ============================================================
// ‚öôÔ∏è C·∫§U H√åNH MIDDLEWARE
// ============================================================
app.use(cors());
app.use(bodyParser.json({ limit: "50mb" }));
app.use(express.static("."));

// ============================================================
// üß† C·∫§U H√åNH GEMINI
// ============================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = "gemini-1.5-flash-latest"; 
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/${GEMINI_MODEL}:generateContent`;

if (!GEMINI_API_KEY) {
  console.warn("‚ö†Ô∏è WARNING: GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env. Chat v√† gi·∫£i to√°n s·∫Ω kh√¥ng ho·∫°t ƒë·ªông!");
}

async function callGeminiModel(contents) {
  if (!GEMINI_API_KEY) return "‚ùå Thi·∫øu GEMINI_API_KEY trong .env.";
  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ contents }),
    });
    if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå L·ªói HTTP ${response.status} t·ª´ Gemini API: ${errorText}`);
        return `‚ùå L·ªói HTTP ${response.status} khi g·ªçi Gemini. Vui l√≤ng ki·ªÉm tra l·∫°i API Key v√† c·∫•u h√¨nh project Google AI.`;
    }
    const data = await response.json();
    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
      return data.candidates[0].content.parts[0].text;
    }
    return "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi vƒÉn b·∫£n h·ª£p l·ªá t·ª´ Gemini.";
  } catch (error) {
    console.error("üî• L·ªói khi g·ªçi Gemini:", error);
    return "‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Google Gemini. (Ki·ªÉm tra server/m·∫°ng)";
  }
}

function buildContentParts(text, image, systemInstruction) {
  let userParts = [{ text: `${systemInstruction}\n\nUser query: ${text || "Please analyze this image."}` }];
  if (image) {
    const [, mimeType, , data] = image.match(/data:(.*?);(.*?),(.*)/);
    userParts.push({ inlineData: { mimeType, data } });
  }
  return userParts;
}

// ============================================================
//  G S·ª¨A L·ªñI & N√ÇNG C·∫§P CH·ª®C NƒÇNG D·ªäCH
// ============================================================
async function translateToEnglish(text) {
    if (!text || !/[a-zA-Z]/.test(text) === false) { // N·∫øu kh√¥ng c√≥ text ho·∫∑c text ƒë√£ l√† ti·∫øng Anh
        return text;
    }
    try {
        const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&q=${encodeURIComponent(text)}`;
        const response = await fetch(url);
        const data = await response.json();
        // D·ªØ li·ªáu tr·∫£ v·ªÅ l√† m·ªôt m·∫£ng ph·ª©c t·∫°p, ta ch·ªâ c·∫ßn l·∫•y chu·ªói ƒë√£ d·ªãch
        const translatedText = data[0].map(item => item[0]).join('');
        console.log(`‚úÖ ƒê√£ d·ªãch: "${text}" -> "${translatedText}"`);
        return translatedText || text;
    } catch (error) {
        console.error(" L·ªói d·ªãch thu·∫≠t:", error.message);
        return text; // Tr·∫£ v·ªÅ vƒÉn b·∫£n g·ªëc n·∫øu c√≥ l·ªói
    }
}


// ============================================================
// üñºÔ∏è API T·∫†O ·∫¢NH (Pollinations - C√≥ d·ªãch ƒëa ng√¥n ng·ªØ)
// ============================================================
app.post("/api/pollinations-image", async (req, res) => {
  let { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh." });
  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const safePrompt = encodeURIComponent(translatedPrompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${safePrompt}?nologo=true&width=1024&height=1024`;
    res.json({ imageUrl });
  } catch (error) {
    console.error("L·ªói Pollinations:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫°o ·∫£nh." });
  }
});

// (C√°c API kh√°c gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi)
async function fetchFrameWithRetry(url, index, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const r = await fetch(url);
            if (r.ok) {
                const buffer = Buffer.from(await r.arrayBuffer());
                return `data:image/jpeg;base64,${buffer.toString("base64")}`;
            }
            console.warn(`‚ö†Ô∏è Khung h√¨nh ${index} l·ªói (HTTP ${r.status}). Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
        } catch (e) {
            console.warn(`‚ö†Ô∏è Khung h√¨nh ${index} l·ªói m·∫°ng. Th·ª≠ l·∫°i l·∫ßn ${attempt}/${maxRetries}.`);
        }
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
    console.error(`‚ùå B·ªè qua khung h√¨nh ${index} sau ${maxRetries} l·∫ßn th·ª≠.`);
    return null;
}

app.post("/api/pollinations-frames", async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£." });
  try {
    const translatedPrompt = await translateToEnglish(prompt);
    const framesCount = 12;
    console.log(`ƒêang t·∫£i ${framesCount} khung h√¨nh cho: ${translatedPrompt}`);
    const downloadPromises = Array.from({ length: framesCount }, (_, i) => {
      const variation = `${translatedPrompt}, motion frame ${i + 1} of ${framesCount}, cinematic`;
      const url = `https://image.pollinations.ai/prompt/${encodeURIComponent(variation)}?nologo=true&width=512&height=512`;
      return fetchFrameWithRetry(url, i + 1);
    });
    const frames = (await Promise.all(downloadPromises)).filter(f => f);
    if (frames.length < 8) return res.status(500).json({ message: `Kh√¥ng th·ªÉ t·∫£i ƒë·ªß khung h√¨nh (${frames.length}/${framesCount}).` });
    res.json({ frames });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server khi t·∫°o khung h√¨nh." });
  }
});

async function handleGeminiRequest(req, res, systemInstruction) {
    const { message, question, image } = req.body;
    const text = message || question;
    if (!text && !image) return res.status(400).json({ response: "Thi·∫øu n·ªôi dung." });
    try {
        const userParts = buildContentParts(text, image, systemInstruction);
        const contents = [{ role: "user", parts: userParts }];
        const reply = await callGeminiModel(contents);
        res.json({ response: reply });
    } catch (error) {
        res.status(500).json({ response: "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu tr√™n server." });
    }
}

app.post("/api/chat", (req, res) => {
    const { language } = req.body;
    const langName = { 'vi': 'Ti·∫øng Vi·ªát', 'en': 'English', 'zh-CN': 'ÁÆÄ‰Ωì‰∏≠Êñá' }[language] || 'Ti·∫øng Vi·ªát';
    const systemInstruction = `B·∫°n l√† tr·ª£ l√Ω AI. Tr·∫£ l·ªùi b·∫±ng **${langName}**. Tr·∫£ l·ªùi **NG·∫ÆN G·ªåN**, ƒë·ªãnh d·∫°ng markdown, v√† highlight √Ω ch√≠nh b·∫±ng <mark class="highlight">...</mark>.`;
    handleGeminiRequest(req, res, systemInstruction);
});

app.post("/api/math", (req, res) => {
    const systemInstruction = `Gi·∫£i b√†i to√°n b·∫±ng ti·∫øng Vi·ªát. Ch·ªâ hi·ªÉn th·ªã **b∆∞·ªõc ch√≠nh** v√† **k·∫øt qu·∫£ cu·ªëi c√πng**. D√πng LaTeX cho c√¥ng th·ª©c ($...$) v√† <mark class="highlight">...</mark> cho k·∫øt qu·∫£.`;
    handleGeminiRequest(req, res, systemInstruction);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT} (Model: ${GEMINI_MODEL})`);
  if (!GEMINI_API_KEY) console.warn("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!");
});